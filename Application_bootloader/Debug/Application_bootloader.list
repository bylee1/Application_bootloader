
Application_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  0000018c  0000018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  00003050  00003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  00003098  00003098  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  00003098  00003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  000030a0  000030a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  000030a0  000030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  000030a4  000030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  000030a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  000030b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  000030b4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd35  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000232d  00000000  00000000  0002fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  000320e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b83  00000000  00000000  00032fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019dfa  00000000  00000000  00033b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118e2  00000000  00000000  0004d935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a544e  00000000  00000000  0005f217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d34  00000000  00000000  00104668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010839c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0000018c <__do_global_dtors_aux>:
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
     18c:	b510      	push	{r4, lr}
     18e:	4c05      	ldr	r4, [pc, #20]	; (1a4 <__do_global_dtors_aux+0x18>)
     190:	7823      	ldrb	r3, [r4, #0]
     192:	b933      	cbnz	r3, 1a2 <__do_global_dtors_aux+0x16>
     194:	4b04      	ldr	r3, [pc, #16]	; (1a8 <__do_global_dtors_aux+0x1c>)
     196:	b113      	cbz	r3, 19e <__do_global_dtors_aux+0x12>
     198:	4804      	ldr	r0, [pc, #16]	; (1ac <__do_global_dtors_aux+0x20>)
     19a:	f3af 8000 	nop.w
     19e:	2301      	movs	r3, #1
     1a0:	7023      	strb	r3, [r4, #0]
     1a2:	bd10      	pop	{r4, pc}
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
     1a4:	2000000c 	.word	0x2000000c
     1a8:	00000000 	.word	0x00000000
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
     1ac:	00003038 	.word	0x00003038

000001b0 <frame_dummy>:
     1b0:	b508      	push	{r3, lr}
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <frame_dummy+0x10>)
     1b4:	b11b      	cbz	r3, 1be <frame_dummy+0xe>
     1b6:	4903      	ldr	r1, [pc, #12]	; (1c4 <frame_dummy+0x14>)
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
     1b8:	4803      	ldr	r0, [pc, #12]	; (1c8 <frame_dummy+0x18>)
     1ba:	f3af 8000 	nop.w
     1be:	bd08      	pop	{r3, pc}
     1c0:	00000000 	.word	0x00000000
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
     1c4:	20000010 	.word	0x20000010
     1c8:	00003038 	.word	0x00003038

000001cc <__aeabi_uldivmod>:
     1cc:	b953      	cbnz	r3, 1e4 <__aeabi_uldivmod+0x18>
     1ce:	b94a      	cbnz	r2, 1e4 <__aeabi_uldivmod+0x18>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
     1d0:	2900      	cmp	r1, #0
     1d2:	bf08      	it	eq
     1d4:	2800      	cmpeq	r0, #0
     1d6:	bf1c      	itt	ne
     1d8:	f04f 31ff 	movne.w	r1, #4294967295
      }
      break;
     1dc:	f04f 30ff 	movne.w	r0, #4294967295

    default:
      status = HAL_ERROR;
     1e0:	f000 b970 	b.w	4c4 <__aeabi_idiv0>
      break;
     1e4:	f1ad 0c08 	sub.w	ip, sp, #8
      break;
     1e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      break;
     1ec:	f000 f806 	bl	1fc <__udivmoddi4>
      break;
  }

  return status;
}
     1f0:	f8dd e004 	ldr.w	lr, [sp, #4]
     1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1f8:	b004      	add	sp, #16
     1fa:	4770      	bx	lr

000001fc <__udivmoddi4>:
     1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      /* No source */
      pllvco = 0U;
      break;
    }

    switch(PeriphClk)
     200:	9e08      	ldr	r6, [sp, #32]
     202:	460d      	mov	r5, r1
     204:	4604      	mov	r4, r0
     206:	460f      	mov	r7, r1
     208:	2b00      	cmp	r3, #0
     20a:	d14a      	bne.n	2a2 <_Min_Heap_Size+0xa2>
     20c:	428a      	cmp	r2, r1
     20e:	4694      	mov	ip, r2
     210:	d965      	bls.n	2de <_Min_Heap_Size+0xde>
     212:	fab2 f382 	clz	r3, r2
     216:	b143      	cbz	r3, 22a <_Min_Heap_Size+0x2a>
     218:	fa02 fc03 	lsl.w	ip, r2, r3
     21c:	f1c3 0220 	rsb	r2, r3, #32
     220:	409f      	lsls	r7, r3
     222:	fa20 f202 	lsr.w	r2, r0, r2
     226:	4317      	orrs	r7, r2
     228:	409c      	lsls	r4, r3
     22a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     22e:	fa1f f58c 	uxth.w	r5, ip
     232:	fbb7 f1fe 	udiv	r1, r7, lr
     236:	0c22      	lsrs	r2, r4, #16
     238:	fb0e 7711 	mls	r7, lr, r1, r7
     23c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
     240:	fb01 f005 	mul.w	r0, r1, r5
     244:	4290      	cmp	r0, r2
     246:	d90a      	bls.n	25e <_Min_Heap_Size+0x5e>
     248:	eb1c 0202 	adds.w	r2, ip, r2
     24c:	f101 37ff 	add.w	r7, r1, #4294967295
     250:	f080 811c 	bcs.w	48c <_Min_Stack_Size+0x8c>
     254:	4290      	cmp	r0, r2
     256:	f240 8119 	bls.w	48c <_Min_Stack_Size+0x8c>
     25a:	3902      	subs	r1, #2
     25c:	4462      	add	r2, ip
     25e:	1a12      	subs	r2, r2, r0
     260:	b2a4      	uxth	r4, r4
     262:	fbb2 f0fe 	udiv	r0, r2, lr
     266:	fb0e 2210 	mls	r2, lr, r0, r2

    case RCC_PERIPHCLK_SDMMC1:

#endif /* SDMMC1 && !RCC_CCIPR2_SDMMCSEL */
      {
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
     26a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     26e:	fb00 f505 	mul.w	r5, r0, r5
     272:	42a5      	cmp	r5, r4
     274:	d90a      	bls.n	28c <_Min_Heap_Size+0x8c>
     276:	eb1c 0404 	adds.w	r4, ip, r4
     27a:	f100 32ff 	add.w	r2, r0, #4294967295
     27e:	f080 8107 	bcs.w	490 <_Min_Stack_Size+0x90>
     282:	42a5      	cmp	r5, r4
     284:	f240 8104 	bls.w	490 <_Min_Stack_Size+0x90>
     288:	4464      	add	r4, ip
     28a:	3802      	subs	r0, #2
     28c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     290:	1b64      	subs	r4, r4, r5
     292:	2100      	movs	r1, #0
          }
          break;
#endif /* RCC_HSI48_SUPPORT */
        default:
          /* No clock source, frequency default init at 0 */
          break;
     294:	b11e      	cbz	r6, 29e <_Min_Heap_Size+0x9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
     296:	40dc      	lsrs	r4, r3
     298:	2300      	movs	r3, #0
     29a:	e9c6 4300 	strd	r4, r3, [r6]
     29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
     2a2:	428b      	cmp	r3, r1
     2a4:	d908      	bls.n	2b8 <_Min_Heap_Size+0xb8>
     2a6:	2e00      	cmp	r6, #0
     2a8:	f000 80ed 	beq.w	486 <_Min_Stack_Size+0x86>
     2ac:	2100      	movs	r1, #0
     2ae:	e9c6 0500 	strd	r0, r5, [r6]
     2b2:	4608      	mov	r0, r1
     2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2b8:	fab3 f183 	clz	r1, r3
     2bc:	2900      	cmp	r1, #0
     2be:	d149      	bne.n	354 <_Min_Heap_Size+0x154>
     2c0:	42ab      	cmp	r3, r5
     2c2:	d302      	bcc.n	2ca <_Min_Heap_Size+0xca>
     2c4:	4282      	cmp	r2, r0
     2c6:	f200 80f8 	bhi.w	4ba <_Min_Stack_Size+0xba>
     2ca:	1a84      	subs	r4, r0, r2
     2cc:	eb65 0203 	sbc.w	r2, r5, r3
          break;
     2d0:	2001      	movs	r0, #1
     2d2:	4617      	mov	r7, r2
     2d4:	2e00      	cmp	r6, #0
     2d6:	d0e2      	beq.n	29e <_Min_Heap_Size+0x9e>
     2d8:	e9c6 4700 	strd	r4, r7, [r6]
     2dc:	e7df      	b.n	29e <_Min_Heap_Size+0x9e>
     2de:	b902      	cbnz	r2, 2e2 <_Min_Heap_Size+0xe2>
     2e0:	deff      	udf	#255	; 0xff
     2e2:	fab2 f382 	clz	r3, r2
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
     2e6:	2b00      	cmp	r3, #0
     2e8:	f040 8090 	bne.w	40c <_Min_Stack_Size+0xc>
     2ec:	1a8a      	subs	r2, r1, r2
     2ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
     2f2:	fa1f fe8c 	uxth.w	lr, ip
     2f6:	2101      	movs	r1, #1
     2f8:	fbb2 f5f7 	udiv	r5, r2, r7
     2fc:	fb07 2015 	mls	r0, r7, r5, r2
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
     300:	0c22      	lsrs	r2, r4, #16
     302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
     306:	fb0e f005 	mul.w	r0, lr, r5
     30a:	4290      	cmp	r0, r2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
     30c:	d908      	bls.n	320 <_Min_Heap_Size+0x120>
     30e:	eb1c 0202 	adds.w	r2, ip, r2
     312:	f105 38ff 	add.w	r8, r5, #4294967295
     316:	d202      	bcs.n	31e <_Min_Heap_Size+0x11e>
     318:	4290      	cmp	r0, r2
     31a:	f200 80cb 	bhi.w	4b4 <_Min_Stack_Size+0xb4>
     31e:	4645      	mov	r5, r8
     320:	1a12      	subs	r2, r2, r0
     322:	b2a4      	uxth	r4, r4
     324:	fbb2 f0f7 	udiv	r0, r2, r7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
     328:	fb07 2210 	mls	r2, r7, r0, r2
     32c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     330:	fb0e fe00 	mul.w	lr, lr, r0
     334:	45a6      	cmp	lr, r4
     336:	d908      	bls.n	34a <_Min_Heap_Size+0x14a>
     338:	eb1c 0404 	adds.w	r4, ip, r4
          break;
     33c:	f100 32ff 	add.w	r2, r0, #4294967295
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
     340:	d202      	bcs.n	348 <_Min_Heap_Size+0x148>
     342:	45a6      	cmp	lr, r4
     344:	f200 80bb 	bhi.w	4be <_Min_Stack_Size+0xbe>
     348:	4610      	mov	r0, r2
     34a:	eba4 040e 	sub.w	r4, r4, lr
            frequency = HSI48_VALUE;
     34e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
          break;
     352:	e79f      	b.n	294 <_Min_Heap_Size+0x94>
     354:	f1c1 0720 	rsb	r7, r1, #32
          break;
     358:	408b      	lsls	r3, r1
          break;
     35a:	fa22 fc07 	lsr.w	ip, r2, r7
          break;
     35e:	ea4c 0c03 	orr.w	ip, ip, r3
#endif /* SDMMC1 && RCC_CCIPR2_SDMMCSEL */

    case RCC_PERIPHCLK_USART1:
      {
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
     362:	fa05 f401 	lsl.w	r4, r5, r1
     366:	fa20 f307 	lsr.w	r3, r0, r7
     36a:	40fd      	lsrs	r5, r7
     36c:	ea4f 491c 	mov.w	r9, ip, lsr #16
     370:	4323      	orrs	r3, r4
     372:	fbb5 f8f9 	udiv	r8, r5, r9
     376:	fa1f fe8c 	uxth.w	lr, ip
     37a:	fb09 5518 	mls	r5, r9, r8, r5
     37e:	0c1c      	lsrs	r4, r3, #16
     380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     384:	fb08 f50e 	mul.w	r5, r8, lr
     388:	42a5      	cmp	r5, r4
     38a:	fa02 f201 	lsl.w	r2, r2, r1

        switch(srcclk)
        {
        case RCC_USART1CLKSOURCE_PCLK2:
          frequency = HAL_RCC_GetPCLK2Freq();
     38e:	fa00 f001 	lsl.w	r0, r0, r1
          break;
     392:	d90b      	bls.n	3ac <_Min_Heap_Size+0x1ac>
        case RCC_USART1CLKSOURCE_SYSCLK:
          frequency = HAL_RCC_GetSysClockFreq();
     394:	eb1c 0404 	adds.w	r4, ip, r4
     398:	f108 3aff 	add.w	sl, r8, #4294967295
          break;
        case RCC_USART1CLKSOURCE_HSI:
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
     39c:	f080 8088 	bcs.w	4b0 <_Min_Stack_Size+0xb0>
     3a0:	42a5      	cmp	r5, r4
     3a2:	f240 8085 	bls.w	4b0 <_Min_Stack_Size+0xb0>
     3a6:	f1a8 0802 	sub.w	r8, r8, #2
          {
            frequency = HSI_VALUE;
     3aa:	4464      	add	r4, ip
     3ac:	1b64      	subs	r4, r4, r5
          }
          break;
     3ae:	b29d      	uxth	r5, r3
        case RCC_USART1CLKSOURCE_LSE:
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
     3b0:	fbb4 f3f9 	udiv	r3, r4, r9
     3b4:	fb09 4413 	mls	r4, r9, r3, r4
     3b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
     3bc:	fb03 fe0e 	mul.w	lr, r3, lr
          {
            frequency = LSE_VALUE;
     3c0:	45a6      	cmp	lr, r4
     3c2:	d908      	bls.n	3d6 <_Min_Heap_Size+0x1d6>
          }
          break;
     3c4:	eb1c 0404 	adds.w	r4, ip, r4
        default:
          /* No clock source, frequency default init at 0 */
          break;
     3c8:	f103 35ff 	add.w	r5, r3, #4294967295
          break;
     3cc:	d26c      	bcs.n	4a8 <_Min_Stack_Size+0xa8>
          break;
     3ce:	45a6      	cmp	lr, r4
        }

        break;
     3d0:	d96a      	bls.n	4a8 <_Min_Stack_Size+0xa8>
      }

    case RCC_PERIPHCLK_USART2:
      {
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
     3d2:	3b02      	subs	r3, #2
     3d4:	4464      	add	r4, ip
     3d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     3da:	fba3 9502 	umull	r9, r5, r3, r2
     3de:	eba4 040e 	sub.w	r4, r4, lr
     3e2:	42ac      	cmp	r4, r5
     3e4:	46c8      	mov	r8, r9
     3e6:	46ae      	mov	lr, r5
     3e8:	d356      	bcc.n	498 <_Min_Stack_Size+0x98>
     3ea:	d053      	beq.n	494 <_Min_Stack_Size+0x94>
     3ec:	b156      	cbz	r6, 404 <_Min_Stack_Size+0x4>
     3ee:	ebb0 0208 	subs.w	r2, r0, r8
     3f2:	eb64 040e 	sbc.w	r4, r4, lr
     3f6:	fa04 f707 	lsl.w	r7, r4, r7
     3fa:	40ca      	lsrs	r2, r1
     3fc:	40cc      	lsrs	r4, r1
     3fe:	4317      	orrs	r7, r2
     400:	e9c6 7400 	strd	r7, r4, [r6]
     404:	4618      	mov	r0, r3
     406:	2100      	movs	r1, #0
     408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     40c:	f1c3 0120 	rsb	r1, r3, #32
     410:	fa02 fc03 	lsl.w	ip, r2, r3
     414:	fa20 f201 	lsr.w	r2, r0, r1
     418:	fa25 f101 	lsr.w	r1, r5, r1
     41c:	409d      	lsls	r5, r3
     41e:	432a      	orrs	r2, r5

        switch(srcclk)
        {
        case RCC_USART2CLKSOURCE_PCLK1:
          frequency = HAL_RCC_GetPCLK1Freq();
     420:	ea4f 471c 	mov.w	r7, ip, lsr #16
     424:	fa1f fe8c 	uxth.w	lr, ip
          break;
        case RCC_USART2CLKSOURCE_SYSCLK:
          frequency = HAL_RCC_GetSysClockFreq();
     428:	fbb1 f0f7 	udiv	r0, r1, r7
     42c:	fb07 1510 	mls	r5, r7, r0, r1
          break;
        case RCC_USART2CLKSOURCE_HSI:
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
     430:	0c11      	lsrs	r1, r2, #16
     432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
     436:	fb00 f50e 	mul.w	r5, r0, lr
     43a:	428d      	cmp	r5, r1
     43c:	fa04 f403 	lsl.w	r4, r4, r3
          {
            frequency = HSI_VALUE;
     440:	d908      	bls.n	454 <_Min_Stack_Size+0x54>
          }
          break;
     442:	eb1c 0101 	adds.w	r1, ip, r1
        case RCC_USART2CLKSOURCE_LSE:
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
     446:	f100 38ff 	add.w	r8, r0, #4294967295
     44a:	d22f      	bcs.n	4ac <_Min_Stack_Size+0xac>
     44c:	428d      	cmp	r5, r1
     44e:	d92d      	bls.n	4ac <_Min_Stack_Size+0xac>
     450:	3802      	subs	r0, #2
          {
            frequency = LSE_VALUE;
     452:	4461      	add	r1, ip
     454:	1b49      	subs	r1, r1, r5
     456:	b292      	uxth	r2, r2
          }
          break;
     458:	fbb1 f5f7 	udiv	r5, r1, r7
        default:
          /* No clock source, frequency default init at 0 */
          break;
     45c:	fb07 1115 	mls	r1, r7, r5, r1
          break;
     460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
        }

        break;
     464:	fb05 f10e 	mul.w	r1, r5, lr
#if defined(USART3)

    case RCC_PERIPHCLK_USART3:
      {
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
     468:	4291      	cmp	r1, r2
     46a:	d908      	bls.n	47e <_Min_Stack_Size+0x7e>
     46c:	eb1c 0202 	adds.w	r2, ip, r2
     470:	f105 38ff 	add.w	r8, r5, #4294967295
     474:	d216      	bcs.n	4a4 <_Min_Stack_Size+0xa4>
     476:	4291      	cmp	r1, r2
     478:	d914      	bls.n	4a4 <_Min_Stack_Size+0xa4>
     47a:	3d02      	subs	r5, #2
     47c:	4462      	add	r2, ip
     47e:	1a52      	subs	r2, r2, r1
     480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
     484:	e738      	b.n	2f8 <_Min_Heap_Size+0xf8>
     486:	4631      	mov	r1, r6
     488:	4630      	mov	r0, r6
     48a:	e708      	b.n	29e <_Min_Heap_Size+0x9e>
     48c:	4639      	mov	r1, r7
     48e:	e6e6      	b.n	25e <_Min_Heap_Size+0x5e>
     490:	4610      	mov	r0, r2
     492:	e6fb      	b.n	28c <_Min_Heap_Size+0x8c>
     494:	4548      	cmp	r0, r9
            frequency = LSE_VALUE;
          }
          break;
        default:
          /* No clock source, frequency default init at 0 */
          break;
     496:	d2a9      	bcs.n	3ec <_Min_Heap_Size+0x1ec>
          frequency = HAL_RCC_GetPCLK1Freq();
     498:	ebb9 0802 	subs.w	r8, r9, r2
     49c:	eb65 0e0c 	sbc.w	lr, r5, ip
          frequency = HAL_RCC_GetSysClockFreq();
     4a0:	3b01      	subs	r3, #1
     4a2:	e7a3      	b.n	3ec <_Min_Heap_Size+0x1ec>
     4a4:	4645      	mov	r5, r8
          break;
     4a6:	e7ea      	b.n	47e <_Min_Stack_Size+0x7e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
     4a8:	462b      	mov	r3, r5
     4aa:	e794      	b.n	3d6 <_Min_Heap_Size+0x1d6>
     4ac:	4640      	mov	r0, r8
     4ae:	e7d1      	b.n	454 <_Min_Stack_Size+0x54>
     4b0:	46d0      	mov	r8, sl
     4b2:	e77b      	b.n	3ac <_Min_Heap_Size+0x1ac>
     4b4:	3d02      	subs	r5, #2
            frequency = HSI_VALUE;
     4b6:	4462      	add	r2, ip
     4b8:	e732      	b.n	320 <_Min_Heap_Size+0x120>
          break;
     4ba:	4608      	mov	r0, r1
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
     4bc:	e70a      	b.n	2d4 <_Min_Heap_Size+0xd4>
     4be:	4464      	add	r4, ip
     4c0:	3802      	subs	r0, #2
     4c2:	e742      	b.n	34a <_Min_Heap_Size+0x14a>

000004c4 <__aeabi_idiv0>:
     4c4:	4770      	bx	lr
     4c6:	bf00      	nop

000004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
     4c8:	b580      	push	{r7, lr}
     4ca:	b088      	sub	sp, #32
     4cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
     4ce:	f107 030c 	add.w	r3, r7, #12
     4d2:	2200      	movs	r2, #0
     4d4:	601a      	str	r2, [r3, #0]
     4d6:	605a      	str	r2, [r3, #4]
     4d8:	609a      	str	r2, [r3, #8]
     4da:	60da      	str	r2, [r3, #12]
     4dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
     4de:	4b1d      	ldr	r3, [pc, #116]	; (554 <MX_GPIO_Init+0x8c>)
     4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     4e2:	4a1c      	ldr	r2, [pc, #112]	; (554 <MX_GPIO_Init+0x8c>)
     4e4:	f043 0304 	orr.w	r3, r3, #4
     4e8:	64d3      	str	r3, [r2, #76]	; 0x4c
     4ea:	4b1a      	ldr	r3, [pc, #104]	; (554 <MX_GPIO_Init+0x8c>)
     4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     4ee:	f003 0304 	and.w	r3, r3, #4
     4f2:	60bb      	str	r3, [r7, #8]
     4f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
     4f6:	4b17      	ldr	r3, [pc, #92]	; (554 <MX_GPIO_Init+0x8c>)
     4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     4fa:	4a16      	ldr	r2, [pc, #88]	; (554 <MX_GPIO_Init+0x8c>)
     4fc:	f043 0301 	orr.w	r3, r3, #1
     500:	64d3      	str	r3, [r2, #76]	; 0x4c
     502:	4b14      	ldr	r3, [pc, #80]	; (554 <MX_GPIO_Init+0x8c>)
     504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     506:	f003 0301 	and.w	r3, r3, #1
     50a:	607b      	str	r3, [r7, #4]
     50c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
     50e:	4b11      	ldr	r3, [pc, #68]	; (554 <MX_GPIO_Init+0x8c>)
     510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     512:	4a10      	ldr	r2, [pc, #64]	; (554 <MX_GPIO_Init+0x8c>)
     514:	f043 0302 	orr.w	r3, r3, #2
     518:	64d3      	str	r3, [r2, #76]	; 0x4c
     51a:	4b0e      	ldr	r3, [pc, #56]	; (554 <MX_GPIO_Init+0x8c>)
     51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     51e:	f003 0302 	and.w	r3, r3, #2
     522:	603b      	str	r3, [r7, #0]
     524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
     526:	2200      	movs	r2, #0
     528:	2108      	movs	r1, #8
     52a:	480b      	ldr	r0, [pc, #44]	; (558 <MX_GPIO_Init+0x90>)
     52c:	f000 fd1a 	bl	f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
     530:	2308      	movs	r3, #8
     532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
     534:	2301      	movs	r3, #1
     536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
     538:	2300      	movs	r3, #0
     53a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
     53c:	2300      	movs	r3, #0
     53e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
     540:	f107 030c 	add.w	r3, r7, #12
     544:	4619      	mov	r1, r3
     546:	4804      	ldr	r0, [pc, #16]	; (558 <MX_GPIO_Init+0x90>)
     548:	f000 fb9a 	bl	c80 <HAL_GPIO_Init>

}
     54c:	bf00      	nop
     54e:	3720      	adds	r7, #32
     550:	46bd      	mov	sp, r7
     552:	bd80      	pop	{r7, pc}
     554:	40021000 	.word	0x40021000
     558:	48000400 	.word	0x48000400

0000055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
     55c:	b580      	push	{r7, lr}
     55e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
     560:	f000 fa07 	bl	972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
     564:	f000 f80c 	bl	580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
     568:	f7ff ffae 	bl	4c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
     56c:	f000 f93e 	bl	7ec <MX_USART2_UART_Init>
  MX_TIM6_Init();
     570:	f000 f8de 	bl	730 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
     574:	4801      	ldr	r0, [pc, #4]	; (57c <main+0x20>)
     576:	f001 fe0f 	bl	2198 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
     57a:	e7fe      	b.n	57a <main+0x1e>
     57c:	20000028 	.word	0x20000028

00000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
     580:	b580      	push	{r7, lr}
     582:	b096      	sub	sp, #88	; 0x58
     584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
     586:	f107 0314 	add.w	r3, r7, #20
     58a:	2244      	movs	r2, #68	; 0x44
     58c:	2100      	movs	r1, #0
     58e:	4618      	mov	r0, r3
     590:	f002 fd25 	bl	2fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
     594:	463b      	mov	r3, r7
     596:	2200      	movs	r2, #0
     598:	601a      	str	r2, [r3, #0]
     59a:	605a      	str	r2, [r3, #4]
     59c:	609a      	str	r2, [r3, #8]
     59e:	60da      	str	r2, [r3, #12]
     5a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
     5a2:	f44f 7000 	mov.w	r0, #512	; 0x200
     5a6:	f000 fd2d 	bl	1004 <HAL_PWREx_ControlVoltageScaling>
     5aa:	4603      	mov	r3, r0
     5ac:	2b00      	cmp	r3, #0
     5ae:	d001      	beq.n	5b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
     5b0:	f000 f84a 	bl	648 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
     5b4:	f000 fd08 	bl	fc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
     5b8:	4b1b      	ldr	r3, [pc, #108]	; (628 <SystemClock_Config+0xa8>)
     5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
     5be:	4a1a      	ldr	r2, [pc, #104]	; (628 <SystemClock_Config+0xa8>)
     5c0:	f023 0318 	bic.w	r3, r3, #24
     5c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
     5c8:	2314      	movs	r3, #20
     5ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
     5cc:	2301      	movs	r3, #1
     5ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
     5d0:	2301      	movs	r3, #1
     5d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
     5d4:	2300      	movs	r3, #0
     5d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
     5d8:	23a0      	movs	r3, #160	; 0xa0
     5da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
     5dc:	2300      	movs	r3, #0
     5de:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
     5e0:	f107 0314 	add.w	r3, r7, #20
     5e4:	4618      	mov	r0, r3
     5e6:	f000 fd63 	bl	10b0 <HAL_RCC_OscConfig>
     5ea:	4603      	mov	r3, r0
     5ec:	2b00      	cmp	r3, #0
     5ee:	d001      	beq.n	5f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
     5f0:	f000 f82a 	bl	648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
     5f4:	230f      	movs	r3, #15
     5f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
     5f8:	2300      	movs	r3, #0
     5fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
     5fc:	2300      	movs	r3, #0
     5fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     600:	2300      	movs	r3, #0
     602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     604:	2300      	movs	r3, #0
     606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
     608:	463b      	mov	r3, r7
     60a:	2101      	movs	r1, #1
     60c:	4618      	mov	r0, r3
     60e:	f001 f9b1 	bl	1974 <HAL_RCC_ClockConfig>
     612:	4603      	mov	r3, r0
     614:	2b00      	cmp	r3, #0
     616:	d001      	beq.n	61c <SystemClock_Config+0x9c>
  {
    Error_Handler();
     618:	f000 f816 	bl	648 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
     61c:	f001 fd54 	bl	20c8 <HAL_RCCEx_EnableMSIPLLMode>
}
     620:	bf00      	nop
     622:	3758      	adds	r7, #88	; 0x58
     624:	46bd      	mov	sp, r7
     626:	bd80      	pop	{r7, pc}
     628:	40021000 	.word	0x40021000

0000062c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
     62c:	b580      	push	{r7, lr}
     62e:	b082      	sub	sp, #8
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
     634:	2108      	movs	r1, #8
     636:	4803      	ldr	r0, [pc, #12]	; (644 <HAL_TIM_PeriodElapsedCallback+0x18>)
     638:	f000 fcac 	bl	f94 <HAL_GPIO_TogglePin>

}
     63c:	bf00      	nop
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bd80      	pop	{r7, pc}
     644:	48000400 	.word	0x48000400

00000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
     648:	b480      	push	{r7}
     64a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     64c:	b672      	cpsid	i
}
     64e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
     650:	e7fe      	b.n	650 <Error_Handler+0x8>
	...

00000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
     654:	b480      	push	{r7}
     656:	b083      	sub	sp, #12
     658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
     65a:	4b0f      	ldr	r3, [pc, #60]	; (698 <HAL_MspInit+0x44>)
     65c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     65e:	4a0e      	ldr	r2, [pc, #56]	; (698 <HAL_MspInit+0x44>)
     660:	f043 0301 	orr.w	r3, r3, #1
     664:	6613      	str	r3, [r2, #96]	; 0x60
     666:	4b0c      	ldr	r3, [pc, #48]	; (698 <HAL_MspInit+0x44>)
     668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     66a:	f003 0301 	and.w	r3, r3, #1
     66e:	607b      	str	r3, [r7, #4]
     670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
     672:	4b09      	ldr	r3, [pc, #36]	; (698 <HAL_MspInit+0x44>)
     674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     676:	4a08      	ldr	r2, [pc, #32]	; (698 <HAL_MspInit+0x44>)
     678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     67c:	6593      	str	r3, [r2, #88]	; 0x58
     67e:	4b06      	ldr	r3, [pc, #24]	; (698 <HAL_MspInit+0x44>)
     680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     686:	603b      	str	r3, [r7, #0]
     688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
     68a:	bf00      	nop
     68c:	370c      	adds	r7, #12
     68e:	46bd      	mov	sp, r7
     690:	f85d 7b04 	ldr.w	r7, [sp], #4
     694:	4770      	bx	lr
     696:	bf00      	nop
     698:	40021000 	.word	0x40021000

0000069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
     69c:	b480      	push	{r7}
     69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
     6a0:	e7fe      	b.n	6a0 <NMI_Handler+0x4>

000006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
     6a2:	b480      	push	{r7}
     6a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
     6a6:	e7fe      	b.n	6a6 <HardFault_Handler+0x4>

000006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
     6a8:	b480      	push	{r7}
     6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
     6ac:	e7fe      	b.n	6ac <MemManage_Handler+0x4>

000006ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
     6ae:	b480      	push	{r7}
     6b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
     6b2:	e7fe      	b.n	6b2 <BusFault_Handler+0x4>

000006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
     6b4:	b480      	push	{r7}
     6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
     6b8:	e7fe      	b.n	6b8 <UsageFault_Handler+0x4>

000006ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
     6ba:	b480      	push	{r7}
     6bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
     6be:	bf00      	nop
     6c0:	46bd      	mov	sp, r7
     6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c6:	4770      	bx	lr

000006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
     6c8:	b480      	push	{r7}
     6ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
     6cc:	bf00      	nop
     6ce:	46bd      	mov	sp, r7
     6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6d4:	4770      	bx	lr

000006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
     6d6:	b480      	push	{r7}
     6d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
     6da:	bf00      	nop
     6dc:	46bd      	mov	sp, r7
     6de:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e2:	4770      	bx	lr

000006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
     6e4:	b580      	push	{r7, lr}
     6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
     6e8:	f000 f998 	bl	a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
     6ec:	bf00      	nop
     6ee:	bd80      	pop	{r7, pc}

000006f0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
     6f4:	4802      	ldr	r0, [pc, #8]	; (700 <TIM6_IRQHandler+0x10>)
     6f6:	f001 fda3 	bl	2240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
     6fa:	bf00      	nop
     6fc:	bd80      	pop	{r7, pc}
     6fe:	bf00      	nop
     700:	20000028 	.word	0x20000028

00000704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
     704:	b480      	push	{r7}
     706:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
     708:	4b07      	ldr	r3, [pc, #28]	; (728 <SystemInit+0x24>)
     70a:	4a08      	ldr	r2, [pc, #32]	; (72c <SystemInit+0x28>)
     70c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
     70e:	4b06      	ldr	r3, [pc, #24]	; (728 <SystemInit+0x24>)
     710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     714:	4a04      	ldr	r2, [pc, #16]	; (728 <SystemInit+0x24>)
     716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     71a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
     71e:	bf00      	nop
     720:	46bd      	mov	sp, r7
     722:	f85d 7b04 	ldr.w	r7, [sp], #4
     726:	4770      	bx	lr
     728:	e000ed00 	.word	0xe000ed00
     72c:	08004000 	.word	0x08004000

00000730 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
     730:	b580      	push	{r7, lr}
     732:	b084      	sub	sp, #16
     734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
     736:	1d3b      	adds	r3, r7, #4
     738:	2200      	movs	r2, #0
     73a:	601a      	str	r2, [r3, #0]
     73c:	605a      	str	r2, [r3, #4]
     73e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
     740:	4b15      	ldr	r3, [pc, #84]	; (798 <MX_TIM6_Init+0x68>)
     742:	4a16      	ldr	r2, [pc, #88]	; (79c <MX_TIM6_Init+0x6c>)
     744:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
     746:	4b14      	ldr	r3, [pc, #80]	; (798 <MX_TIM6_Init+0x68>)
     748:	f647 42ff 	movw	r2, #31999	; 0x7cff
     74c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
     74e:	4b12      	ldr	r3, [pc, #72]	; (798 <MX_TIM6_Init+0x68>)
     750:	2200      	movs	r2, #0
     752:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
     754:	4b10      	ldr	r3, [pc, #64]	; (798 <MX_TIM6_Init+0x68>)
     756:	f240 32e7 	movw	r2, #999	; 0x3e7
     75a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
     75c:	4b0e      	ldr	r3, [pc, #56]	; (798 <MX_TIM6_Init+0x68>)
     75e:	2200      	movs	r2, #0
     760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
     762:	480d      	ldr	r0, [pc, #52]	; (798 <MX_TIM6_Init+0x68>)
     764:	f001 fcc0 	bl	20e8 <HAL_TIM_Base_Init>
     768:	4603      	mov	r3, r0
     76a:	2b00      	cmp	r3, #0
     76c:	d001      	beq.n	772 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
     76e:	f7ff ff6b 	bl	648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
     772:	2300      	movs	r3, #0
     774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
     776:	2300      	movs	r3, #0
     778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
     77a:	1d3b      	adds	r3, r7, #4
     77c:	4619      	mov	r1, r3
     77e:	4806      	ldr	r0, [pc, #24]	; (798 <MX_TIM6_Init+0x68>)
     780:	f001 feec 	bl	255c <HAL_TIMEx_MasterConfigSynchronization>
     784:	4603      	mov	r3, r0
     786:	2b00      	cmp	r3, #0
     788:	d001      	beq.n	78e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
     78a:	f7ff ff5d 	bl	648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
     78e:	bf00      	nop
     790:	3710      	adds	r7, #16
     792:	46bd      	mov	sp, r7
     794:	bd80      	pop	{r7, pc}
     796:	bf00      	nop
     798:	20000028 	.word	0x20000028
     79c:	40001000 	.word	0x40001000

000007a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
     7a0:	b580      	push	{r7, lr}
     7a2:	b084      	sub	sp, #16
     7a4:	af00      	add	r7, sp, #0
     7a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	4a0d      	ldr	r2, [pc, #52]	; (7e4 <HAL_TIM_Base_MspInit+0x44>)
     7ae:	4293      	cmp	r3, r2
     7b0:	d113      	bne.n	7da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
     7b2:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <HAL_TIM_Base_MspInit+0x48>)
     7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     7b6:	4a0c      	ldr	r2, [pc, #48]	; (7e8 <HAL_TIM_Base_MspInit+0x48>)
     7b8:	f043 0310 	orr.w	r3, r3, #16
     7bc:	6593      	str	r3, [r2, #88]	; 0x58
     7be:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <HAL_TIM_Base_MspInit+0x48>)
     7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     7c2:	f003 0310 	and.w	r3, r3, #16
     7c6:	60fb      	str	r3, [r7, #12]
     7c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
     7ca:	2200      	movs	r2, #0
     7cc:	2100      	movs	r1, #0
     7ce:	2036      	movs	r0, #54	; 0x36
     7d0:	f000 fa1f 	bl	c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
     7d4:	2036      	movs	r0, #54	; 0x36
     7d6:	f000 fa38 	bl	c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
     7da:	bf00      	nop
     7dc:	3710      	adds	r7, #16
     7de:	46bd      	mov	sp, r7
     7e0:	bd80      	pop	{r7, pc}
     7e2:	bf00      	nop
     7e4:	40001000 	.word	0x40001000
     7e8:	40021000 	.word	0x40021000

000007ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
     7ec:	b580      	push	{r7, lr}
     7ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
     7f0:	4b14      	ldr	r3, [pc, #80]	; (844 <MX_USART2_UART_Init+0x58>)
     7f2:	4a15      	ldr	r2, [pc, #84]	; (848 <MX_USART2_UART_Init+0x5c>)
     7f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
     7f6:	4b13      	ldr	r3, [pc, #76]	; (844 <MX_USART2_UART_Init+0x58>)
     7f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
     7fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
     7fe:	4b11      	ldr	r3, [pc, #68]	; (844 <MX_USART2_UART_Init+0x58>)
     800:	2200      	movs	r2, #0
     802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <MX_USART2_UART_Init+0x58>)
     806:	2200      	movs	r2, #0
     808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
     80a:	4b0e      	ldr	r3, [pc, #56]	; (844 <MX_USART2_UART_Init+0x58>)
     80c:	2200      	movs	r2, #0
     80e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
     810:	4b0c      	ldr	r3, [pc, #48]	; (844 <MX_USART2_UART_Init+0x58>)
     812:	220c      	movs	r2, #12
     814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
     816:	4b0b      	ldr	r3, [pc, #44]	; (844 <MX_USART2_UART_Init+0x58>)
     818:	2200      	movs	r2, #0
     81a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
     81c:	4b09      	ldr	r3, [pc, #36]	; (844 <MX_USART2_UART_Init+0x58>)
     81e:	2200      	movs	r2, #0
     820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
     822:	4b08      	ldr	r3, [pc, #32]	; (844 <MX_USART2_UART_Init+0x58>)
     824:	2200      	movs	r2, #0
     826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
     828:	4b06      	ldr	r3, [pc, #24]	; (844 <MX_USART2_UART_Init+0x58>)
     82a:	2200      	movs	r2, #0
     82c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
     82e:	4805      	ldr	r0, [pc, #20]	; (844 <MX_USART2_UART_Init+0x58>)
     830:	f001 ff18 	bl	2664 <HAL_UART_Init>
     834:	4603      	mov	r3, r0
     836:	2b00      	cmp	r3, #0
     838:	d001      	beq.n	83e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
     83a:	f7ff ff05 	bl	648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
     83e:	bf00      	nop
     840:	bd80      	pop	{r7, pc}
     842:	bf00      	nop
     844:	20000074 	.word	0x20000074
     848:	40004400 	.word	0x40004400

0000084c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
     84c:	b580      	push	{r7, lr}
     84e:	b096      	sub	sp, #88	; 0x58
     850:	af00      	add	r7, sp, #0
     852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
     854:	f107 0344 	add.w	r3, r7, #68	; 0x44
     858:	2200      	movs	r2, #0
     85a:	601a      	str	r2, [r3, #0]
     85c:	605a      	str	r2, [r3, #4]
     85e:	609a      	str	r2, [r3, #8]
     860:	60da      	str	r2, [r3, #12]
     862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
     864:	f107 0310 	add.w	r3, r7, #16
     868:	2234      	movs	r2, #52	; 0x34
     86a:	2100      	movs	r1, #0
     86c:	4618      	mov	r0, r3
     86e:	f002 fbb6 	bl	2fde <memset>
  if(uartHandle->Instance==USART2)
     872:	687b      	ldr	r3, [r7, #4]
     874:	681b      	ldr	r3, [r3, #0]
     876:	4a28      	ldr	r2, [pc, #160]	; (918 <HAL_UART_MspInit+0xcc>)
     878:	4293      	cmp	r3, r2
     87a:	d148      	bne.n	90e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
     87c:	2302      	movs	r3, #2
     87e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
     880:	2300      	movs	r3, #0
     882:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
     884:	f107 0310 	add.w	r3, r7, #16
     888:	4618      	mov	r0, r3
     88a:	f001 fa97 	bl	1dbc <HAL_RCCEx_PeriphCLKConfig>
     88e:	4603      	mov	r3, r0
     890:	2b00      	cmp	r3, #0
     892:	d001      	beq.n	898 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
     894:	f7ff fed8 	bl	648 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
     898:	4b20      	ldr	r3, [pc, #128]	; (91c <HAL_UART_MspInit+0xd0>)
     89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     89c:	4a1f      	ldr	r2, [pc, #124]	; (91c <HAL_UART_MspInit+0xd0>)
     89e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     8a2:	6593      	str	r3, [r2, #88]	; 0x58
     8a4:	4b1d      	ldr	r3, [pc, #116]	; (91c <HAL_UART_MspInit+0xd0>)
     8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     8ac:	60fb      	str	r3, [r7, #12]
     8ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
     8b0:	4b1a      	ldr	r3, [pc, #104]	; (91c <HAL_UART_MspInit+0xd0>)
     8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     8b4:	4a19      	ldr	r2, [pc, #100]	; (91c <HAL_UART_MspInit+0xd0>)
     8b6:	f043 0301 	orr.w	r3, r3, #1
     8ba:	64d3      	str	r3, [r2, #76]	; 0x4c
     8bc:	4b17      	ldr	r3, [pc, #92]	; (91c <HAL_UART_MspInit+0xd0>)
     8be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     8c0:	f003 0301 	and.w	r3, r3, #1
     8c4:	60bb      	str	r3, [r7, #8]
     8c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
     8c8:	2304      	movs	r3, #4
     8ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
     8cc:	2302      	movs	r3, #2
     8ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
     8d0:	2300      	movs	r3, #0
     8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
     8d4:	2303      	movs	r3, #3
     8d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
     8d8:	2307      	movs	r3, #7
     8da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
     8dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
     8e0:	4619      	mov	r1, r3
     8e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
     8e6:	f000 f9cb 	bl	c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
     8ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     8ee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
     8f0:	2302      	movs	r3, #2
     8f2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
     8f4:	2300      	movs	r3, #0
     8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
     8f8:	2303      	movs	r3, #3
     8fa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
     8fc:	2303      	movs	r3, #3
     8fe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
     900:	f107 0344 	add.w	r3, r7, #68	; 0x44
     904:	4619      	mov	r1, r3
     906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
     90a:	f000 f9b9 	bl	c80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
     90e:	bf00      	nop
     910:	3758      	adds	r7, #88	; 0x58
     912:	46bd      	mov	sp, r7
     914:	bd80      	pop	{r7, pc}
     916:	bf00      	nop
     918:	40004400 	.word	0x40004400
     91c:	40021000 	.word	0x40021000

00000920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
     920:	f8df d034 	ldr.w	sp, [pc, #52]	; 958 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
     924:	f7ff feee 	bl	704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
     928:	480c      	ldr	r0, [pc, #48]	; (95c <LoopForever+0x6>)
  ldr r1, =_edata
     92a:	490d      	ldr	r1, [pc, #52]	; (960 <LoopForever+0xa>)
  ldr r2, =_sidata
     92c:	4a0d      	ldr	r2, [pc, #52]	; (964 <LoopForever+0xe>)
  movs r3, #0
     92e:	2300      	movs	r3, #0
  b LoopCopyDataInit
     930:	e002      	b.n	938 <LoopCopyDataInit>

00000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
     932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
     934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
     936:	3304      	adds	r3, #4

00000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
     938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
     93a:	428c      	cmp	r4, r1
  bcc CopyDataInit
     93c:	d3f9      	bcc.n	932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
     93e:	4a0a      	ldr	r2, [pc, #40]	; (968 <LoopForever+0x12>)
  ldr r4, =_ebss
     940:	4c0a      	ldr	r4, [pc, #40]	; (96c <LoopForever+0x16>)
  movs r3, #0
     942:	2300      	movs	r3, #0
  b LoopFillZerobss
     944:	e001      	b.n	94a <LoopFillZerobss>

00000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
     946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
     948:	3204      	adds	r2, #4

0000094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
     94a:	42a2      	cmp	r2, r4
  bcc FillZerobss
     94c:	d3fb      	bcc.n	946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
     94e:	f002 fb4f 	bl	2ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
     952:	f7ff fe03 	bl	55c <main>

00000956 <LoopForever>:

LoopForever:
    b LoopForever
     956:	e7fe      	b.n	956 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
     958:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
     95c:	20000000 	.word	0x20000000
  ldr r1, =_edata
     960:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
     964:	000030a8 	.word	0x000030a8
  ldr r2, =_sbss
     968:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
     96c:	20000100 	.word	0x20000100

00000970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
     970:	e7fe      	b.n	970 <ADC1_2_IRQHandler>

00000972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
     972:	b580      	push	{r7, lr}
     974:	b082      	sub	sp, #8
     976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
     978:	2300      	movs	r3, #0
     97a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
     97c:	2003      	movs	r0, #3
     97e:	f000 f93d 	bl	bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
     982:	2000      	movs	r0, #0
     984:	f000 f80e 	bl	9a4 <HAL_InitTick>
     988:	4603      	mov	r3, r0
     98a:	2b00      	cmp	r3, #0
     98c:	d002      	beq.n	994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
     98e:	2301      	movs	r3, #1
     990:	71fb      	strb	r3, [r7, #7]
     992:	e001      	b.n	998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
     994:	f7ff fe5e 	bl	654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
     998:	79fb      	ldrb	r3, [r7, #7]
}
     99a:	4618      	mov	r0, r3
     99c:	3708      	adds	r7, #8
     99e:	46bd      	mov	sp, r7
     9a0:	bd80      	pop	{r7, pc}
	...

000009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	b084      	sub	sp, #16
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
     9ac:	2300      	movs	r3, #0
     9ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
     9b0:	4b17      	ldr	r3, [pc, #92]	; (a10 <HAL_InitTick+0x6c>)
     9b2:	781b      	ldrb	r3, [r3, #0]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d023      	beq.n	a00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
     9b8:	4b16      	ldr	r3, [pc, #88]	; (a14 <HAL_InitTick+0x70>)
     9ba:	681a      	ldr	r2, [r3, #0]
     9bc:	4b14      	ldr	r3, [pc, #80]	; (a10 <HAL_InitTick+0x6c>)
     9be:	781b      	ldrb	r3, [r3, #0]
     9c0:	4619      	mov	r1, r3
     9c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     9c6:	fbb3 f3f1 	udiv	r3, r3, r1
     9ca:	fbb2 f3f3 	udiv	r3, r2, r3
     9ce:	4618      	mov	r0, r3
     9d0:	f000 f949 	bl	c66 <HAL_SYSTICK_Config>
     9d4:	4603      	mov	r3, r0
     9d6:	2b00      	cmp	r3, #0
     9d8:	d10f      	bne.n	9fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	2b0f      	cmp	r3, #15
     9de:	d809      	bhi.n	9f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
     9e0:	2200      	movs	r2, #0
     9e2:	6879      	ldr	r1, [r7, #4]
     9e4:	f04f 30ff 	mov.w	r0, #4294967295
     9e8:	f000 f913 	bl	c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
     9ec:	4a0a      	ldr	r2, [pc, #40]	; (a18 <HAL_InitTick+0x74>)
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	6013      	str	r3, [r2, #0]
     9f2:	e007      	b.n	a04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
     9f4:	2301      	movs	r3, #1
     9f6:	73fb      	strb	r3, [r7, #15]
     9f8:	e004      	b.n	a04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
     9fa:	2301      	movs	r3, #1
     9fc:	73fb      	strb	r3, [r7, #15]
     9fe:	e001      	b.n	a04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
     a00:	2301      	movs	r3, #1
     a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
     a04:	7bfb      	ldrb	r3, [r7, #15]
}
     a06:	4618      	mov	r0, r3
     a08:	3710      	adds	r7, #16
     a0a:	46bd      	mov	sp, r7
     a0c:	bd80      	pop	{r7, pc}
     a0e:	bf00      	nop
     a10:	20000008 	.word	0x20000008
     a14:	20000000 	.word	0x20000000
     a18:	20000004 	.word	0x20000004

00000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
     a1c:	b480      	push	{r7}
     a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
     a20:	4b06      	ldr	r3, [pc, #24]	; (a3c <HAL_IncTick+0x20>)
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	461a      	mov	r2, r3
     a26:	4b06      	ldr	r3, [pc, #24]	; (a40 <HAL_IncTick+0x24>)
     a28:	681b      	ldr	r3, [r3, #0]
     a2a:	4413      	add	r3, r2
     a2c:	4a04      	ldr	r2, [pc, #16]	; (a40 <HAL_IncTick+0x24>)
     a2e:	6013      	str	r3, [r2, #0]
}
     a30:	bf00      	nop
     a32:	46bd      	mov	sp, r7
     a34:	f85d 7b04 	ldr.w	r7, [sp], #4
     a38:	4770      	bx	lr
     a3a:	bf00      	nop
     a3c:	20000008 	.word	0x20000008
     a40:	200000fc 	.word	0x200000fc

00000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
     a44:	b480      	push	{r7}
     a46:	af00      	add	r7, sp, #0
  return uwTick;
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <HAL_GetTick+0x14>)
     a4a:	681b      	ldr	r3, [r3, #0]
}
     a4c:	4618      	mov	r0, r3
     a4e:	46bd      	mov	sp, r7
     a50:	f85d 7b04 	ldr.w	r7, [sp], #4
     a54:	4770      	bx	lr
     a56:	bf00      	nop
     a58:	200000fc 	.word	0x200000fc

00000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
     a5c:	b480      	push	{r7}
     a5e:	b085      	sub	sp, #20
     a60:	af00      	add	r7, sp, #0
     a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
     a64:	687b      	ldr	r3, [r7, #4]
     a66:	f003 0307 	and.w	r3, r3, #7
     a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
     a6c:	4b0c      	ldr	r3, [pc, #48]	; (aa0 <__NVIC_SetPriorityGrouping+0x44>)
     a6e:	68db      	ldr	r3, [r3, #12]
     a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
     a72:	68ba      	ldr	r2, [r7, #8]
     a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
     a78:	4013      	ands	r3, r2
     a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
     a7c:	68fb      	ldr	r3, [r7, #12]
     a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     a80:	68bb      	ldr	r3, [r7, #8]
     a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
     a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
     a8e:	4a04      	ldr	r2, [pc, #16]	; (aa0 <__NVIC_SetPriorityGrouping+0x44>)
     a90:	68bb      	ldr	r3, [r7, #8]
     a92:	60d3      	str	r3, [r2, #12]
}
     a94:	bf00      	nop
     a96:	3714      	adds	r7, #20
     a98:	46bd      	mov	sp, r7
     a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
     a9e:	4770      	bx	lr
     aa0:	e000ed00 	.word	0xe000ed00

00000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
     aa4:	b480      	push	{r7}
     aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
     aa8:	4b04      	ldr	r3, [pc, #16]	; (abc <__NVIC_GetPriorityGrouping+0x18>)
     aaa:	68db      	ldr	r3, [r3, #12]
     aac:	0a1b      	lsrs	r3, r3, #8
     aae:	f003 0307 	and.w	r3, r3, #7
}
     ab2:	4618      	mov	r0, r3
     ab4:	46bd      	mov	sp, r7
     ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
     aba:	4770      	bx	lr
     abc:	e000ed00 	.word	0xe000ed00

00000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
     ac0:	b480      	push	{r7}
     ac2:	b083      	sub	sp, #12
     ac4:	af00      	add	r7, sp, #0
     ac6:	4603      	mov	r3, r0
     ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
     ace:	2b00      	cmp	r3, #0
     ad0:	db0b      	blt.n	aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ad2:	79fb      	ldrb	r3, [r7, #7]
     ad4:	f003 021f 	and.w	r2, r3, #31
     ad8:	4907      	ldr	r1, [pc, #28]	; (af8 <__NVIC_EnableIRQ+0x38>)
     ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
     ade:	095b      	lsrs	r3, r3, #5
     ae0:	2001      	movs	r0, #1
     ae2:	fa00 f202 	lsl.w	r2, r0, r2
     ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
     aea:	bf00      	nop
     aec:	370c      	adds	r7, #12
     aee:	46bd      	mov	sp, r7
     af0:	f85d 7b04 	ldr.w	r7, [sp], #4
     af4:	4770      	bx	lr
     af6:	bf00      	nop
     af8:	e000e100 	.word	0xe000e100

00000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     afc:	b480      	push	{r7}
     afe:	b083      	sub	sp, #12
     b00:	af00      	add	r7, sp, #0
     b02:	4603      	mov	r3, r0
     b04:	6039      	str	r1, [r7, #0]
     b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
     b0c:	2b00      	cmp	r3, #0
     b0e:	db0a      	blt.n	b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b10:	683b      	ldr	r3, [r7, #0]
     b12:	b2da      	uxtb	r2, r3
     b14:	490c      	ldr	r1, [pc, #48]	; (b48 <__NVIC_SetPriority+0x4c>)
     b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
     b1a:	0112      	lsls	r2, r2, #4
     b1c:	b2d2      	uxtb	r2, r2
     b1e:	440b      	add	r3, r1
     b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     b24:	e00a      	b.n	b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	b2da      	uxtb	r2, r3
     b2a:	4908      	ldr	r1, [pc, #32]	; (b4c <__NVIC_SetPriority+0x50>)
     b2c:	79fb      	ldrb	r3, [r7, #7]
     b2e:	f003 030f 	and.w	r3, r3, #15
     b32:	3b04      	subs	r3, #4
     b34:	0112      	lsls	r2, r2, #4
     b36:	b2d2      	uxtb	r2, r2
     b38:	440b      	add	r3, r1
     b3a:	761a      	strb	r2, [r3, #24]
}
     b3c:	bf00      	nop
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr
     b48:	e000e100 	.word	0xe000e100
     b4c:	e000ed00 	.word	0xe000ed00

00000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
     b50:	b480      	push	{r7}
     b52:	b089      	sub	sp, #36	; 0x24
     b54:	af00      	add	r7, sp, #0
     b56:	60f8      	str	r0, [r7, #12]
     b58:	60b9      	str	r1, [r7, #8]
     b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	f003 0307 	and.w	r3, r3, #7
     b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
     b64:	69fb      	ldr	r3, [r7, #28]
     b66:	f1c3 0307 	rsb	r3, r3, #7
     b6a:	2b04      	cmp	r3, #4
     b6c:	bf28      	it	cs
     b6e:	2304      	movcs	r3, #4
     b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
     b72:	69fb      	ldr	r3, [r7, #28]
     b74:	3304      	adds	r3, #4
     b76:	2b06      	cmp	r3, #6
     b78:	d902      	bls.n	b80 <NVIC_EncodePriority+0x30>
     b7a:	69fb      	ldr	r3, [r7, #28]
     b7c:	3b03      	subs	r3, #3
     b7e:	e000      	b.n	b82 <NVIC_EncodePriority+0x32>
     b80:	2300      	movs	r3, #0
     b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
     b84:	f04f 32ff 	mov.w	r2, #4294967295
     b88:	69bb      	ldr	r3, [r7, #24]
     b8a:	fa02 f303 	lsl.w	r3, r2, r3
     b8e:	43da      	mvns	r2, r3
     b90:	68bb      	ldr	r3, [r7, #8]
     b92:	401a      	ands	r2, r3
     b94:	697b      	ldr	r3, [r7, #20]
     b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
     b98:	f04f 31ff 	mov.w	r1, #4294967295
     b9c:	697b      	ldr	r3, [r7, #20]
     b9e:	fa01 f303 	lsl.w	r3, r1, r3
     ba2:	43d9      	mvns	r1, r3
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
     ba8:	4313      	orrs	r3, r2
         );
}
     baa:	4618      	mov	r0, r3
     bac:	3724      	adds	r7, #36	; 0x24
     bae:	46bd      	mov	sp, r7
     bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb4:	4770      	bx	lr
	...

00000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b082      	sub	sp, #8
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	3b01      	subs	r3, #1
     bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     bc8:	d301      	bcc.n	bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
     bca:	2301      	movs	r3, #1
     bcc:	e00f      	b.n	bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
     bce:	4a0a      	ldr	r2, [pc, #40]	; (bf8 <SysTick_Config+0x40>)
     bd0:	687b      	ldr	r3, [r7, #4]
     bd2:	3b01      	subs	r3, #1
     bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
     bd6:	210f      	movs	r1, #15
     bd8:	f04f 30ff 	mov.w	r0, #4294967295
     bdc:	f7ff ff8e 	bl	afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
     be0:	4b05      	ldr	r3, [pc, #20]	; (bf8 <SysTick_Config+0x40>)
     be2:	2200      	movs	r2, #0
     be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     be6:	4b04      	ldr	r3, [pc, #16]	; (bf8 <SysTick_Config+0x40>)
     be8:	2207      	movs	r2, #7
     bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
     bec:	2300      	movs	r3, #0
}
     bee:	4618      	mov	r0, r3
     bf0:	3708      	adds	r7, #8
     bf2:	46bd      	mov	sp, r7
     bf4:	bd80      	pop	{r7, pc}
     bf6:	bf00      	nop
     bf8:	e000e010 	.word	0xe000e010

00000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
     bfc:	b580      	push	{r7, lr}
     bfe:	b082      	sub	sp, #8
     c00:	af00      	add	r7, sp, #0
     c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
     c04:	6878      	ldr	r0, [r7, #4]
     c06:	f7ff ff29 	bl	a5c <__NVIC_SetPriorityGrouping>
}
     c0a:	bf00      	nop
     c0c:	3708      	adds	r7, #8
     c0e:	46bd      	mov	sp, r7
     c10:	bd80      	pop	{r7, pc}

00000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
     c12:	b580      	push	{r7, lr}
     c14:	b086      	sub	sp, #24
     c16:	af00      	add	r7, sp, #0
     c18:	4603      	mov	r3, r0
     c1a:	60b9      	str	r1, [r7, #8]
     c1c:	607a      	str	r2, [r7, #4]
     c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
     c20:	2300      	movs	r3, #0
     c22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
     c24:	f7ff ff3e 	bl	aa4 <__NVIC_GetPriorityGrouping>
     c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
     c2a:	687a      	ldr	r2, [r7, #4]
     c2c:	68b9      	ldr	r1, [r7, #8]
     c2e:	6978      	ldr	r0, [r7, #20]
     c30:	f7ff ff8e 	bl	b50 <NVIC_EncodePriority>
     c34:	4602      	mov	r2, r0
     c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
     c3a:	4611      	mov	r1, r2
     c3c:	4618      	mov	r0, r3
     c3e:	f7ff ff5d 	bl	afc <__NVIC_SetPriority>
}
     c42:	bf00      	nop
     c44:	3718      	adds	r7, #24
     c46:	46bd      	mov	sp, r7
     c48:	bd80      	pop	{r7, pc}

00000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
     c4a:	b580      	push	{r7, lr}
     c4c:	b082      	sub	sp, #8
     c4e:	af00      	add	r7, sp, #0
     c50:	4603      	mov	r3, r0
     c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
     c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
     c58:	4618      	mov	r0, r3
     c5a:	f7ff ff31 	bl	ac0 <__NVIC_EnableIRQ>
}
     c5e:	bf00      	nop
     c60:	3708      	adds	r7, #8
     c62:	46bd      	mov	sp, r7
     c64:	bd80      	pop	{r7, pc}

00000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
     c66:	b580      	push	{r7, lr}
     c68:	b082      	sub	sp, #8
     c6a:	af00      	add	r7, sp, #0
     c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
     c6e:	6878      	ldr	r0, [r7, #4]
     c70:	f7ff ffa2 	bl	bb8 <SysTick_Config>
     c74:	4603      	mov	r3, r0
}
     c76:	4618      	mov	r0, r3
     c78:	3708      	adds	r7, #8
     c7a:	46bd      	mov	sp, r7
     c7c:	bd80      	pop	{r7, pc}
	...

00000c80 <HAL_GPIO_Init>:
{
     c80:	b480      	push	{r7}
     c82:	b087      	sub	sp, #28
     c84:	af00      	add	r7, sp, #0
     c86:	6078      	str	r0, [r7, #4]
     c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
     c8a:	2300      	movs	r3, #0
     c8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
     c8e:	e14e      	b.n	f2e <HAL_GPIO_Init+0x2ae>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
     c90:	683b      	ldr	r3, [r7, #0]
     c92:	681a      	ldr	r2, [r3, #0]
     c94:	2101      	movs	r1, #1
     c96:	697b      	ldr	r3, [r7, #20]
     c98:	fa01 f303 	lsl.w	r3, r1, r3
     c9c:	4013      	ands	r3, r2
     c9e:	60fb      	str	r3, [r7, #12]
    if (iocurrent != 0x00u)
     ca0:	68fb      	ldr	r3, [r7, #12]
     ca2:	2b00      	cmp	r3, #0
     ca4:	f000 8140 	beq.w	f28 <HAL_GPIO_Init+0x2a8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
     ca8:	683b      	ldr	r3, [r7, #0]
     caa:	685b      	ldr	r3, [r3, #4]
     cac:	f003 0303 	and.w	r3, r3, #3
     cb0:	2b01      	cmp	r3, #1
     cb2:	d005      	beq.n	cc0 <HAL_GPIO_Init+0x40>
     cb4:	683b      	ldr	r3, [r7, #0]
     cb6:	685b      	ldr	r3, [r3, #4]
     cb8:	f003 0303 	and.w	r3, r3, #3
     cbc:	2b02      	cmp	r3, #2
     cbe:	d130      	bne.n	d22 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->OSPEEDR;
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	689b      	ldr	r3, [r3, #8]
     cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
     cc6:	697b      	ldr	r3, [r7, #20]
     cc8:	005b      	lsls	r3, r3, #1
     cca:	2203      	movs	r2, #3
     ccc:	fa02 f303 	lsl.w	r3, r2, r3
     cd0:	43db      	mvns	r3, r3
     cd2:	693a      	ldr	r2, [r7, #16]
     cd4:	4013      	ands	r3, r2
     cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
     cd8:	683b      	ldr	r3, [r7, #0]
     cda:	68da      	ldr	r2, [r3, #12]
     cdc:	697b      	ldr	r3, [r7, #20]
     cde:	005b      	lsls	r3, r3, #1
     ce0:	fa02 f303 	lsl.w	r3, r2, r3
     ce4:	693a      	ldr	r2, [r7, #16]
     ce6:	4313      	orrs	r3, r2
     ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	693a      	ldr	r2, [r7, #16]
     cee:	609a      	str	r2, [r3, #8]
        temp = GPIOx->OTYPER;
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	685b      	ldr	r3, [r3, #4]
     cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
     cf6:	2201      	movs	r2, #1
     cf8:	697b      	ldr	r3, [r7, #20]
     cfa:	fa02 f303 	lsl.w	r3, r2, r3
     cfe:	43db      	mvns	r3, r3
     d00:	693a      	ldr	r2, [r7, #16]
     d02:	4013      	ands	r3, r2
     d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
     d06:	683b      	ldr	r3, [r7, #0]
     d08:	685b      	ldr	r3, [r3, #4]
     d0a:	091b      	lsrs	r3, r3, #4
     d0c:	f003 0201 	and.w	r2, r3, #1
     d10:	697b      	ldr	r3, [r7, #20]
     d12:	fa02 f303 	lsl.w	r3, r2, r3
     d16:	693a      	ldr	r2, [r7, #16]
     d18:	4313      	orrs	r3, r2
     d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	693a      	ldr	r2, [r7, #16]
     d20:	605a      	str	r2, [r3, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
     d22:	683b      	ldr	r3, [r7, #0]
     d24:	685b      	ldr	r3, [r3, #4]
     d26:	f003 0303 	and.w	r3, r3, #3
     d2a:	2b03      	cmp	r3, #3
     d2c:	d017      	beq.n	d5e <HAL_GPIO_Init+0xde>
        temp = GPIOx->PUPDR;
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	68db      	ldr	r3, [r3, #12]
     d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
     d34:	697b      	ldr	r3, [r7, #20]
     d36:	005b      	lsls	r3, r3, #1
     d38:	2203      	movs	r2, #3
     d3a:	fa02 f303 	lsl.w	r3, r2, r3
     d3e:	43db      	mvns	r3, r3
     d40:	693a      	ldr	r2, [r7, #16]
     d42:	4013      	ands	r3, r2
     d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
     d46:	683b      	ldr	r3, [r7, #0]
     d48:	689a      	ldr	r2, [r3, #8]
     d4a:	697b      	ldr	r3, [r7, #20]
     d4c:	005b      	lsls	r3, r3, #1
     d4e:	fa02 f303 	lsl.w	r3, r2, r3
     d52:	693a      	ldr	r2, [r7, #16]
     d54:	4313      	orrs	r3, r2
     d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	693a      	ldr	r2, [r7, #16]
     d5c:	60da      	str	r2, [r3, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
     d5e:	683b      	ldr	r3, [r7, #0]
     d60:	685b      	ldr	r3, [r3, #4]
     d62:	f003 0303 	and.w	r3, r3, #3
     d66:	2b02      	cmp	r3, #2
     d68:	d123      	bne.n	db2 <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
     d6a:	697b      	ldr	r3, [r7, #20]
     d6c:	08da      	lsrs	r2, r3, #3
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	3208      	adds	r2, #8
     d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
     d78:	697b      	ldr	r3, [r7, #20]
     d7a:	f003 0307 	and.w	r3, r3, #7
     d7e:	009b      	lsls	r3, r3, #2
     d80:	220f      	movs	r2, #15
     d82:	fa02 f303 	lsl.w	r3, r2, r3
     d86:	43db      	mvns	r3, r3
     d88:	693a      	ldr	r2, [r7, #16]
     d8a:	4013      	ands	r3, r2
     d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
     d8e:	683b      	ldr	r3, [r7, #0]
     d90:	691a      	ldr	r2, [r3, #16]
     d92:	697b      	ldr	r3, [r7, #20]
     d94:	f003 0307 	and.w	r3, r3, #7
     d98:	009b      	lsls	r3, r3, #2
     d9a:	fa02 f303 	lsl.w	r3, r2, r3
     d9e:	693a      	ldr	r2, [r7, #16]
     da0:	4313      	orrs	r3, r2
     da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
     da4:	697b      	ldr	r3, [r7, #20]
     da6:	08da      	lsrs	r2, r3, #3
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	3208      	adds	r2, #8
     dac:	6939      	ldr	r1, [r7, #16]
     dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      temp = GPIOx->MODER;
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
     db8:	697b      	ldr	r3, [r7, #20]
     dba:	005b      	lsls	r3, r3, #1
     dbc:	2203      	movs	r2, #3
     dbe:	fa02 f303 	lsl.w	r3, r2, r3
     dc2:	43db      	mvns	r3, r3
     dc4:	693a      	ldr	r2, [r7, #16]
     dc6:	4013      	ands	r3, r2
     dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
     dca:	683b      	ldr	r3, [r7, #0]
     dcc:	685b      	ldr	r3, [r3, #4]
     dce:	f003 0203 	and.w	r2, r3, #3
     dd2:	697b      	ldr	r3, [r7, #20]
     dd4:	005b      	lsls	r3, r3, #1
     dd6:	fa02 f303 	lsl.w	r3, r2, r3
     dda:	693a      	ldr	r2, [r7, #16]
     ddc:	4313      	orrs	r3, r2
     dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	693a      	ldr	r2, [r7, #16]
     de4:	601a      	str	r2, [r3, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
     de6:	683b      	ldr	r3, [r7, #0]
     de8:	685b      	ldr	r3, [r3, #4]
     dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
     dee:	2b00      	cmp	r3, #0
     df0:	f000 809a 	beq.w	f28 <HAL_GPIO_Init+0x2a8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
     df4:	4b55      	ldr	r3, [pc, #340]	; (f4c <HAL_GPIO_Init+0x2cc>)
     df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     df8:	4a54      	ldr	r2, [pc, #336]	; (f4c <HAL_GPIO_Init+0x2cc>)
     dfa:	f043 0301 	orr.w	r3, r3, #1
     dfe:	6613      	str	r3, [r2, #96]	; 0x60
     e00:	4b52      	ldr	r3, [pc, #328]	; (f4c <HAL_GPIO_Init+0x2cc>)
     e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     e04:	f003 0301 	and.w	r3, r3, #1
     e08:	60bb      	str	r3, [r7, #8]
     e0a:	68bb      	ldr	r3, [r7, #8]
        temp = SYSCFG->EXTICR[position >> 2u];
     e0c:	4a50      	ldr	r2, [pc, #320]	; (f50 <HAL_GPIO_Init+0x2d0>)
     e0e:	697b      	ldr	r3, [r7, #20]
     e10:	089b      	lsrs	r3, r3, #2
     e12:	3302      	adds	r3, #2
     e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
     e1a:	697b      	ldr	r3, [r7, #20]
     e1c:	f003 0303 	and.w	r3, r3, #3
     e20:	009b      	lsls	r3, r3, #2
     e22:	220f      	movs	r2, #15
     e24:	fa02 f303 	lsl.w	r3, r2, r3
     e28:	43db      	mvns	r3, r3
     e2a:	693a      	ldr	r2, [r7, #16]
     e2c:	4013      	ands	r3, r2
     e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
     e36:	d013      	beq.n	e60 <HAL_GPIO_Init+0x1e0>
     e38:	687b      	ldr	r3, [r7, #4]
     e3a:	4a46      	ldr	r2, [pc, #280]	; (f54 <HAL_GPIO_Init+0x2d4>)
     e3c:	4293      	cmp	r3, r2
     e3e:	d00d      	beq.n	e5c <HAL_GPIO_Init+0x1dc>
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	4a45      	ldr	r2, [pc, #276]	; (f58 <HAL_GPIO_Init+0x2d8>)
     e44:	4293      	cmp	r3, r2
     e46:	d007      	beq.n	e58 <HAL_GPIO_Init+0x1d8>
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	4a44      	ldr	r2, [pc, #272]	; (f5c <HAL_GPIO_Init+0x2dc>)
     e4c:	4293      	cmp	r3, r2
     e4e:	d101      	bne.n	e54 <HAL_GPIO_Init+0x1d4>
     e50:	2303      	movs	r3, #3
     e52:	e006      	b.n	e62 <HAL_GPIO_Init+0x1e2>
     e54:	2307      	movs	r3, #7
     e56:	e004      	b.n	e62 <HAL_GPIO_Init+0x1e2>
     e58:	2302      	movs	r3, #2
     e5a:	e002      	b.n	e62 <HAL_GPIO_Init+0x1e2>
     e5c:	2301      	movs	r3, #1
     e5e:	e000      	b.n	e62 <HAL_GPIO_Init+0x1e2>
     e60:	2300      	movs	r3, #0
     e62:	697a      	ldr	r2, [r7, #20]
     e64:	f002 0203 	and.w	r2, r2, #3
     e68:	0092      	lsls	r2, r2, #2
     e6a:	4093      	lsls	r3, r2
     e6c:	693a      	ldr	r2, [r7, #16]
     e6e:	4313      	orrs	r3, r2
     e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
     e72:	4937      	ldr	r1, [pc, #220]	; (f50 <HAL_GPIO_Init+0x2d0>)
     e74:	697b      	ldr	r3, [r7, #20]
     e76:	089b      	lsrs	r3, r3, #2
     e78:	3302      	adds	r3, #2
     e7a:	693a      	ldr	r2, [r7, #16]
     e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        temp = EXTI->RTSR1;
     e80:	4b37      	ldr	r3, [pc, #220]	; (f60 <HAL_GPIO_Init+0x2e0>)
     e82:	689b      	ldr	r3, [r3, #8]
     e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
     e86:	68fb      	ldr	r3, [r7, #12]
     e88:	43db      	mvns	r3, r3
     e8a:	693a      	ldr	r2, [r7, #16]
     e8c:	4013      	ands	r3, r2
     e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
     e90:	683b      	ldr	r3, [r7, #0]
     e92:	685b      	ldr	r3, [r3, #4]
     e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
     e98:	2b00      	cmp	r3, #0
     e9a:	d003      	beq.n	ea4 <HAL_GPIO_Init+0x224>
          temp |= iocurrent;
     e9c:	693a      	ldr	r2, [r7, #16]
     e9e:	68fb      	ldr	r3, [r7, #12]
     ea0:	4313      	orrs	r3, r2
     ea2:	613b      	str	r3, [r7, #16]
        EXTI->RTSR1 = temp;
     ea4:	4a2e      	ldr	r2, [pc, #184]	; (f60 <HAL_GPIO_Init+0x2e0>)
     ea6:	693b      	ldr	r3, [r7, #16]
     ea8:	6093      	str	r3, [r2, #8]
        temp = EXTI->FTSR1;
     eaa:	4b2d      	ldr	r3, [pc, #180]	; (f60 <HAL_GPIO_Init+0x2e0>)
     eac:	68db      	ldr	r3, [r3, #12]
     eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
     eb0:	68fb      	ldr	r3, [r7, #12]
     eb2:	43db      	mvns	r3, r3
     eb4:	693a      	ldr	r2, [r7, #16]
     eb6:	4013      	ands	r3, r2
     eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
     eba:	683b      	ldr	r3, [r7, #0]
     ebc:	685b      	ldr	r3, [r3, #4]
     ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
     ec2:	2b00      	cmp	r3, #0
     ec4:	d003      	beq.n	ece <HAL_GPIO_Init+0x24e>
          temp |= iocurrent;
     ec6:	693a      	ldr	r2, [r7, #16]
     ec8:	68fb      	ldr	r3, [r7, #12]
     eca:	4313      	orrs	r3, r2
     ecc:	613b      	str	r3, [r7, #16]
        EXTI->FTSR1 = temp;
     ece:	4a24      	ldr	r2, [pc, #144]	; (f60 <HAL_GPIO_Init+0x2e0>)
     ed0:	693b      	ldr	r3, [r7, #16]
     ed2:	60d3      	str	r3, [r2, #12]
        temp = EXTI->EMR1;
     ed4:	4b22      	ldr	r3, [pc, #136]	; (f60 <HAL_GPIO_Init+0x2e0>)
     ed6:	685b      	ldr	r3, [r3, #4]
     ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	43db      	mvns	r3, r3
     ede:	693a      	ldr	r2, [r7, #16]
     ee0:	4013      	ands	r3, r2
     ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
     ee4:	683b      	ldr	r3, [r7, #0]
     ee6:	685b      	ldr	r3, [r3, #4]
     ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     eec:	2b00      	cmp	r3, #0
     eee:	d003      	beq.n	ef8 <HAL_GPIO_Init+0x278>
          temp |= iocurrent;
     ef0:	693a      	ldr	r2, [r7, #16]
     ef2:	68fb      	ldr	r3, [r7, #12]
     ef4:	4313      	orrs	r3, r2
     ef6:	613b      	str	r3, [r7, #16]
        EXTI->EMR1 = temp;
     ef8:	4a19      	ldr	r2, [pc, #100]	; (f60 <HAL_GPIO_Init+0x2e0>)
     efa:	693b      	ldr	r3, [r7, #16]
     efc:	6053      	str	r3, [r2, #4]
        temp = EXTI->IMR1;
     efe:	4b18      	ldr	r3, [pc, #96]	; (f60 <HAL_GPIO_Init+0x2e0>)
     f00:	681b      	ldr	r3, [r3, #0]
     f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
     f04:	68fb      	ldr	r3, [r7, #12]
     f06:	43db      	mvns	r3, r3
     f08:	693a      	ldr	r2, [r7, #16]
     f0a:	4013      	ands	r3, r2
     f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
     f0e:	683b      	ldr	r3, [r7, #0]
     f10:	685b      	ldr	r3, [r3, #4]
     f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     f16:	2b00      	cmp	r3, #0
     f18:	d003      	beq.n	f22 <HAL_GPIO_Init+0x2a2>
          temp |= iocurrent;
     f1a:	693a      	ldr	r2, [r7, #16]
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	4313      	orrs	r3, r2
     f20:	613b      	str	r3, [r7, #16]
        EXTI->IMR1 = temp;
     f22:	4a0f      	ldr	r2, [pc, #60]	; (f60 <HAL_GPIO_Init+0x2e0>)
     f24:	693b      	ldr	r3, [r7, #16]
     f26:	6013      	str	r3, [r2, #0]
    position++;
     f28:	697b      	ldr	r3, [r7, #20]
     f2a:	3301      	adds	r3, #1
     f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
     f2e:	683b      	ldr	r3, [r7, #0]
     f30:	681a      	ldr	r2, [r3, #0]
     f32:	697b      	ldr	r3, [r7, #20]
     f34:	fa22 f303 	lsr.w	r3, r2, r3
     f38:	2b00      	cmp	r3, #0
     f3a:	f47f aea9 	bne.w	c90 <HAL_GPIO_Init+0x10>
}
     f3e:	bf00      	nop
     f40:	bf00      	nop
     f42:	371c      	adds	r7, #28
     f44:	46bd      	mov	sp, r7
     f46:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4a:	4770      	bx	lr
     f4c:	40021000 	.word	0x40021000
     f50:	40010000 	.word	0x40010000
     f54:	48000400 	.word	0x48000400
     f58:	48000800 	.word	0x48000800
     f5c:	48000c00 	.word	0x48000c00
     f60:	40010400 	.word	0x40010400

00000f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
     f64:	b480      	push	{r7}
     f66:	b083      	sub	sp, #12
     f68:	af00      	add	r7, sp, #0
     f6a:	6078      	str	r0, [r7, #4]
     f6c:	460b      	mov	r3, r1
     f6e:	807b      	strh	r3, [r7, #2]
     f70:	4613      	mov	r3, r2
     f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
     f74:	787b      	ldrb	r3, [r7, #1]
     f76:	2b00      	cmp	r3, #0
     f78:	d003      	beq.n	f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
     f7a:	887a      	ldrh	r2, [r7, #2]
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
     f80:	e002      	b.n	f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
     f82:	887a      	ldrh	r2, [r7, #2]
     f84:	687b      	ldr	r3, [r7, #4]
     f86:	629a      	str	r2, [r3, #40]	; 0x28
}
     f88:	bf00      	nop
     f8a:	370c      	adds	r7, #12
     f8c:	46bd      	mov	sp, r7
     f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
     f92:	4770      	bx	lr

00000f94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
     f94:	b480      	push	{r7}
     f96:	b085      	sub	sp, #20
     f98:	af00      	add	r7, sp, #0
     f9a:	6078      	str	r0, [r7, #4]
     f9c:	460b      	mov	r3, r1
     f9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	695b      	ldr	r3, [r3, #20]
     fa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
     fa6:	887a      	ldrh	r2, [r7, #2]
     fa8:	68fb      	ldr	r3, [r7, #12]
     faa:	4013      	ands	r3, r2
     fac:	041a      	lsls	r2, r3, #16
     fae:	68fb      	ldr	r3, [r7, #12]
     fb0:	43d9      	mvns	r1, r3
     fb2:	887b      	ldrh	r3, [r7, #2]
     fb4:	400b      	ands	r3, r1
     fb6:	431a      	orrs	r2, r3
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	619a      	str	r2, [r3, #24]
}
     fbc:	bf00      	nop
     fbe:	3714      	adds	r7, #20
     fc0:	46bd      	mov	sp, r7
     fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
     fc6:	4770      	bx	lr

00000fc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
     fc8:	b480      	push	{r7}
     fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
     fcc:	4b05      	ldr	r3, [pc, #20]	; (fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	4a04      	ldr	r2, [pc, #16]	; (fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
     fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     fd6:	6013      	str	r3, [r2, #0]
}
     fd8:	bf00      	nop
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop
     fe4:	40007000 	.word	0x40007000

00000fe8 <HAL_PWREx_GetVoltageRange>:
{
     fe8:	b480      	push	{r7}
     fea:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
     fec:	4b04      	ldr	r3, [pc, #16]	; (1000 <HAL_PWREx_GetVoltageRange+0x18>)
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
     ff4:	4618      	mov	r0, r3
     ff6:	46bd      	mov	sp, r7
     ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ffc:	4770      	bx	lr
     ffe:	bf00      	nop
    1000:	40007000 	.word	0x40007000

00001004 <HAL_PWREx_ControlVoltageScaling>:
{
    1004:	b480      	push	{r7}
    1006:	b085      	sub	sp, #20
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1012:	d130      	bne.n	1076 <HAL_PWREx_ControlVoltageScaling+0x72>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    1014:	4b23      	ldr	r3, [pc, #140]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    101c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1020:	d038      	beq.n	1094 <HAL_PWREx_ControlVoltageScaling+0x90>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
    1022:	4b20      	ldr	r3, [pc, #128]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
    102a:	4a1e      	ldr	r2, [pc, #120]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    102c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1030:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
    1032:	4b1d      	ldr	r3, [pc, #116]	; (10a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
    1034:	681b      	ldr	r3, [r3, #0]
    1036:	2232      	movs	r2, #50	; 0x32
    1038:	fb02 f303 	mul.w	r3, r2, r3
    103c:	4a1b      	ldr	r2, [pc, #108]	; (10ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
    103e:	fba2 2303 	umull	r2, r3, r2, r3
    1042:	0c9b      	lsrs	r3, r3, #18
    1044:	3301      	adds	r3, #1
    1046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
    1048:	e002      	b.n	1050 <HAL_PWREx_ControlVoltageScaling+0x4c>
        wait_loop_index--;
    104a:	68fb      	ldr	r3, [r7, #12]
    104c:	3b01      	subs	r3, #1
    104e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
    1050:	4b14      	ldr	r3, [pc, #80]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    1052:	695b      	ldr	r3, [r3, #20]
    1054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    105c:	d102      	bne.n	1064 <HAL_PWREx_ControlVoltageScaling+0x60>
    105e:	68fb      	ldr	r3, [r7, #12]
    1060:	2b00      	cmp	r3, #0
    1062:	d1f2      	bne.n	104a <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
    1064:	4b0f      	ldr	r3, [pc, #60]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    1066:	695b      	ldr	r3, [r3, #20]
    1068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    106c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1070:	d110      	bne.n	1094 <HAL_PWREx_ControlVoltageScaling+0x90>
        return HAL_TIMEOUT;
    1072:	2303      	movs	r3, #3
    1074:	e00f      	b.n	1096 <HAL_PWREx_ControlVoltageScaling+0x92>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
    1076:	4b0b      	ldr	r3, [pc, #44]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    107e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1082:	d007      	beq.n	1094 <HAL_PWREx_ControlVoltageScaling+0x90>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    1084:	4b07      	ldr	r3, [pc, #28]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
    108c:	4a05      	ldr	r2, [pc, #20]	; (10a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
    108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1092:	6013      	str	r3, [r2, #0]
  return HAL_OK;
    1094:	2300      	movs	r3, #0
}
    1096:	4618      	mov	r0, r3
    1098:	3714      	adds	r7, #20
    109a:	46bd      	mov	sp, r7
    109c:	f85d 7b04 	ldr.w	r7, [sp], #4
    10a0:	4770      	bx	lr
    10a2:	bf00      	nop
    10a4:	40007000 	.word	0x40007000
    10a8:	20000000 	.word	0x20000000
    10ac:	431bde83 	.word	0x431bde83

000010b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	b08a      	sub	sp, #40	; 0x28
    10b4:	af00      	add	r7, sp, #0
    10b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d102      	bne.n	10c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
    10be:	2301      	movs	r3, #1
    10c0:	f000 bc4f 	b.w	1962 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
    10c4:	4b97      	ldr	r3, [pc, #604]	; (1324 <HAL_RCC_OscConfig+0x274>)
    10c6:	689b      	ldr	r3, [r3, #8]
    10c8:	f003 030c 	and.w	r3, r3, #12
    10cc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
    10ce:	4b95      	ldr	r3, [pc, #596]	; (1324 <HAL_RCC_OscConfig+0x274>)
    10d0:	68db      	ldr	r3, [r3, #12]
    10d2:	f003 0303 	and.w	r3, r3, #3
    10d6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	f003 0310 	and.w	r3, r3, #16
    10e0:	2b00      	cmp	r3, #0
    10e2:	f000 80e6 	beq.w	12b2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
    10e6:	6a3b      	ldr	r3, [r7, #32]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d007      	beq.n	10fc <HAL_RCC_OscConfig+0x4c>
    10ec:	6a3b      	ldr	r3, [r7, #32]
    10ee:	2b0c      	cmp	r3, #12
    10f0:	f040 808d 	bne.w	120e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
    10f4:	69fb      	ldr	r3, [r7, #28]
    10f6:	2b01      	cmp	r3, #1
    10f8:	f040 8089 	bne.w	120e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
    10fc:	4b89      	ldr	r3, [pc, #548]	; (1324 <HAL_RCC_OscConfig+0x274>)
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	f003 0302 	and.w	r3, r3, #2
    1104:	2b00      	cmp	r3, #0
    1106:	d006      	beq.n	1116 <HAL_RCC_OscConfig+0x66>
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	69db      	ldr	r3, [r3, #28]
    110c:	2b00      	cmp	r3, #0
    110e:	d102      	bne.n	1116 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
    1110:	2301      	movs	r3, #1
    1112:	f000 bc26 	b.w	1962 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    111a:	4b82      	ldr	r3, [pc, #520]	; (1324 <HAL_RCC_OscConfig+0x274>)
    111c:	681b      	ldr	r3, [r3, #0]
    111e:	f003 0308 	and.w	r3, r3, #8
    1122:	2b00      	cmp	r3, #0
    1124:	d004      	beq.n	1130 <HAL_RCC_OscConfig+0x80>
    1126:	4b7f      	ldr	r3, [pc, #508]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    112e:	e005      	b.n	113c <HAL_RCC_OscConfig+0x8c>
    1130:	4b7c      	ldr	r3, [pc, #496]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1136:	091b      	lsrs	r3, r3, #4
    1138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    113c:	4293      	cmp	r3, r2
    113e:	d224      	bcs.n	118a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1144:	4618      	mov	r0, r3
    1146:	f000 fdd9 	bl	1cfc <RCC_SetFlashLatencyFromMSIRange>
    114a:	4603      	mov	r3, r0
    114c:	2b00      	cmp	r3, #0
    114e:	d002      	beq.n	1156 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
    1150:	2301      	movs	r3, #1
    1152:	f000 bc06 	b.w	1962 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
    1156:	4b73      	ldr	r3, [pc, #460]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1158:	681b      	ldr	r3, [r3, #0]
    115a:	4a72      	ldr	r2, [pc, #456]	; (1324 <HAL_RCC_OscConfig+0x274>)
    115c:	f043 0308 	orr.w	r3, r3, #8
    1160:	6013      	str	r3, [r2, #0]
    1162:	4b70      	ldr	r3, [pc, #448]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    116e:	496d      	ldr	r1, [pc, #436]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1170:	4313      	orrs	r3, r2
    1172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
    1174:	4b6b      	ldr	r3, [pc, #428]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1176:	685b      	ldr	r3, [r3, #4]
    1178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	6a1b      	ldr	r3, [r3, #32]
    1180:	021b      	lsls	r3, r3, #8
    1182:	4968      	ldr	r1, [pc, #416]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1184:	4313      	orrs	r3, r2
    1186:	604b      	str	r3, [r1, #4]
    1188:	e025      	b.n	11d6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
    118a:	4b66      	ldr	r3, [pc, #408]	; (1324 <HAL_RCC_OscConfig+0x274>)
    118c:	681b      	ldr	r3, [r3, #0]
    118e:	4a65      	ldr	r2, [pc, #404]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1190:	f043 0308 	orr.w	r3, r3, #8
    1194:	6013      	str	r3, [r2, #0]
    1196:	4b63      	ldr	r3, [pc, #396]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11a2:	4960      	ldr	r1, [pc, #384]	; (1324 <HAL_RCC_OscConfig+0x274>)
    11a4:	4313      	orrs	r3, r2
    11a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
    11a8:	4b5e      	ldr	r3, [pc, #376]	; (1324 <HAL_RCC_OscConfig+0x274>)
    11aa:	685b      	ldr	r3, [r3, #4]
    11ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
    11b0:	687b      	ldr	r3, [r7, #4]
    11b2:	6a1b      	ldr	r3, [r3, #32]
    11b4:	021b      	lsls	r3, r3, #8
    11b6:	495b      	ldr	r1, [pc, #364]	; (1324 <HAL_RCC_OscConfig+0x274>)
    11b8:	4313      	orrs	r3, r2
    11ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
    11bc:	6a3b      	ldr	r3, [r7, #32]
    11be:	2b00      	cmp	r3, #0
    11c0:	d109      	bne.n	11d6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
    11c2:	687b      	ldr	r3, [r7, #4]
    11c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11c6:	4618      	mov	r0, r3
    11c8:	f000 fd98 	bl	1cfc <RCC_SetFlashLatencyFromMSIRange>
    11cc:	4603      	mov	r3, r0
    11ce:	2b00      	cmp	r3, #0
    11d0:	d001      	beq.n	11d6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
    11d2:	2301      	movs	r3, #1
    11d4:	e3c5      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
    11d6:	f000 fccd 	bl	1b74 <HAL_RCC_GetSysClockFreq>
    11da:	4602      	mov	r2, r0
    11dc:	4b51      	ldr	r3, [pc, #324]	; (1324 <HAL_RCC_OscConfig+0x274>)
    11de:	689b      	ldr	r3, [r3, #8]
    11e0:	091b      	lsrs	r3, r3, #4
    11e2:	f003 030f 	and.w	r3, r3, #15
    11e6:	4950      	ldr	r1, [pc, #320]	; (1328 <HAL_RCC_OscConfig+0x278>)
    11e8:	5ccb      	ldrb	r3, [r1, r3]
    11ea:	f003 031f 	and.w	r3, r3, #31
    11ee:	fa22 f303 	lsr.w	r3, r2, r3
    11f2:	4a4e      	ldr	r2, [pc, #312]	; (132c <HAL_RCC_OscConfig+0x27c>)
    11f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
    11f6:	4b4e      	ldr	r3, [pc, #312]	; (1330 <HAL_RCC_OscConfig+0x280>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	4618      	mov	r0, r3
    11fc:	f7ff fbd2 	bl	9a4 <HAL_InitTick>
    1200:	4603      	mov	r3, r0
    1202:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
    1204:	7dfb      	ldrb	r3, [r7, #23]
    1206:	2b00      	cmp	r3, #0
    1208:	d052      	beq.n	12b0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
    120a:	7dfb      	ldrb	r3, [r7, #23]
    120c:	e3a9      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	69db      	ldr	r3, [r3, #28]
    1212:	2b00      	cmp	r3, #0
    1214:	d032      	beq.n	127c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
    1216:	4b43      	ldr	r3, [pc, #268]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	4a42      	ldr	r2, [pc, #264]	; (1324 <HAL_RCC_OscConfig+0x274>)
    121c:	f043 0301 	orr.w	r3, r3, #1
    1220:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
    1222:	f7ff fc0f 	bl	a44 <HAL_GetTick>
    1226:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
    1228:	e008      	b.n	123c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
    122a:	f7ff fc0b 	bl	a44 <HAL_GetTick>
    122e:	4602      	mov	r2, r0
    1230:	69bb      	ldr	r3, [r7, #24]
    1232:	1ad3      	subs	r3, r2, r3
    1234:	2b02      	cmp	r3, #2
    1236:	d901      	bls.n	123c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
    1238:	2303      	movs	r3, #3
    123a:	e392      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
    123c:	4b39      	ldr	r3, [pc, #228]	; (1324 <HAL_RCC_OscConfig+0x274>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	f003 0302 	and.w	r3, r3, #2
    1244:	2b00      	cmp	r3, #0
    1246:	d0f0      	beq.n	122a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
    1248:	4b36      	ldr	r3, [pc, #216]	; (1324 <HAL_RCC_OscConfig+0x274>)
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	4a35      	ldr	r2, [pc, #212]	; (1324 <HAL_RCC_OscConfig+0x274>)
    124e:	f043 0308 	orr.w	r3, r3, #8
    1252:	6013      	str	r3, [r2, #0]
    1254:	4b33      	ldr	r3, [pc, #204]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    125c:	687b      	ldr	r3, [r7, #4]
    125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1260:	4930      	ldr	r1, [pc, #192]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1262:	4313      	orrs	r3, r2
    1264:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
    1266:	4b2f      	ldr	r3, [pc, #188]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1268:	685b      	ldr	r3, [r3, #4]
    126a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
    126e:	687b      	ldr	r3, [r7, #4]
    1270:	6a1b      	ldr	r3, [r3, #32]
    1272:	021b      	lsls	r3, r3, #8
    1274:	492b      	ldr	r1, [pc, #172]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1276:	4313      	orrs	r3, r2
    1278:	604b      	str	r3, [r1, #4]
    127a:	e01a      	b.n	12b2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
    127c:	4b29      	ldr	r3, [pc, #164]	; (1324 <HAL_RCC_OscConfig+0x274>)
    127e:	681b      	ldr	r3, [r3, #0]
    1280:	4a28      	ldr	r2, [pc, #160]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1282:	f023 0301 	bic.w	r3, r3, #1
    1286:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
    1288:	f7ff fbdc 	bl	a44 <HAL_GetTick>
    128c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
    128e:	e008      	b.n	12a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
    1290:	f7ff fbd8 	bl	a44 <HAL_GetTick>
    1294:	4602      	mov	r2, r0
    1296:	69bb      	ldr	r3, [r7, #24]
    1298:	1ad3      	subs	r3, r2, r3
    129a:	2b02      	cmp	r3, #2
    129c:	d901      	bls.n	12a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
    129e:	2303      	movs	r3, #3
    12a0:	e35f      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
    12a2:	4b20      	ldr	r3, [pc, #128]	; (1324 <HAL_RCC_OscConfig+0x274>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	f003 0302 	and.w	r3, r3, #2
    12aa:	2b00      	cmp	r3, #0
    12ac:	d1f0      	bne.n	1290 <HAL_RCC_OscConfig+0x1e0>
    12ae:	e000      	b.n	12b2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
    12b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	681b      	ldr	r3, [r3, #0]
    12b6:	f003 0301 	and.w	r3, r3, #1
    12ba:	2b00      	cmp	r3, #0
    12bc:	d073      	beq.n	13a6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
    12be:	6a3b      	ldr	r3, [r7, #32]
    12c0:	2b08      	cmp	r3, #8
    12c2:	d005      	beq.n	12d0 <HAL_RCC_OscConfig+0x220>
    12c4:	6a3b      	ldr	r3, [r7, #32]
    12c6:	2b0c      	cmp	r3, #12
    12c8:	d10e      	bne.n	12e8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
    12ca:	69fb      	ldr	r3, [r7, #28]
    12cc:	2b03      	cmp	r3, #3
    12ce:	d10b      	bne.n	12e8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    12d0:	4b14      	ldr	r3, [pc, #80]	; (1324 <HAL_RCC_OscConfig+0x274>)
    12d2:	681b      	ldr	r3, [r3, #0]
    12d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    12d8:	2b00      	cmp	r3, #0
    12da:	d063      	beq.n	13a4 <HAL_RCC_OscConfig+0x2f4>
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	685b      	ldr	r3, [r3, #4]
    12e0:	2b00      	cmp	r3, #0
    12e2:	d15f      	bne.n	13a4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
    12e4:	2301      	movs	r3, #1
    12e6:	e33c      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	685b      	ldr	r3, [r3, #4]
    12ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    12f0:	d106      	bne.n	1300 <HAL_RCC_OscConfig+0x250>
    12f2:	4b0c      	ldr	r3, [pc, #48]	; (1324 <HAL_RCC_OscConfig+0x274>)
    12f4:	681b      	ldr	r3, [r3, #0]
    12f6:	4a0b      	ldr	r2, [pc, #44]	; (1324 <HAL_RCC_OscConfig+0x274>)
    12f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    12fc:	6013      	str	r3, [r2, #0]
    12fe:	e025      	b.n	134c <HAL_RCC_OscConfig+0x29c>
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	685b      	ldr	r3, [r3, #4]
    1304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    1308:	d114      	bne.n	1334 <HAL_RCC_OscConfig+0x284>
    130a:	4b06      	ldr	r3, [pc, #24]	; (1324 <HAL_RCC_OscConfig+0x274>)
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	4a05      	ldr	r2, [pc, #20]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1314:	6013      	str	r3, [r2, #0]
    1316:	4b03      	ldr	r3, [pc, #12]	; (1324 <HAL_RCC_OscConfig+0x274>)
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	4a02      	ldr	r2, [pc, #8]	; (1324 <HAL_RCC_OscConfig+0x274>)
    131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1320:	6013      	str	r3, [r2, #0]
    1322:	e013      	b.n	134c <HAL_RCC_OscConfig+0x29c>
    1324:	40021000 	.word	0x40021000
    1328:	00003050 	.word	0x00003050
    132c:	20000000 	.word	0x20000000
    1330:	20000004 	.word	0x20000004
    1334:	4b8f      	ldr	r3, [pc, #572]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1336:	681b      	ldr	r3, [r3, #0]
    1338:	4a8e      	ldr	r2, [pc, #568]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    133a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    133e:	6013      	str	r3, [r2, #0]
    1340:	4b8c      	ldr	r3, [pc, #560]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	4a8b      	ldr	r2, [pc, #556]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    134a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
    134c:	687b      	ldr	r3, [r7, #4]
    134e:	685b      	ldr	r3, [r3, #4]
    1350:	2b00      	cmp	r3, #0
    1352:	d013      	beq.n	137c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    1354:	f7ff fb76 	bl	a44 <HAL_GetTick>
    1358:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
    135a:	e008      	b.n	136e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
    135c:	f7ff fb72 	bl	a44 <HAL_GetTick>
    1360:	4602      	mov	r2, r0
    1362:	69bb      	ldr	r3, [r7, #24]
    1364:	1ad3      	subs	r3, r2, r3
    1366:	2b64      	cmp	r3, #100	; 0x64
    1368:	d901      	bls.n	136e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
    136a:	2303      	movs	r3, #3
    136c:	e2f9      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
    136e:	4b81      	ldr	r3, [pc, #516]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1370:	681b      	ldr	r3, [r3, #0]
    1372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1376:	2b00      	cmp	r3, #0
    1378:	d0f0      	beq.n	135c <HAL_RCC_OscConfig+0x2ac>
    137a:	e014      	b.n	13a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    137c:	f7ff fb62 	bl	a44 <HAL_GetTick>
    1380:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
    1382:	e008      	b.n	1396 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
    1384:	f7ff fb5e 	bl	a44 <HAL_GetTick>
    1388:	4602      	mov	r2, r0
    138a:	69bb      	ldr	r3, [r7, #24]
    138c:	1ad3      	subs	r3, r2, r3
    138e:	2b64      	cmp	r3, #100	; 0x64
    1390:	d901      	bls.n	1396 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
    1392:	2303      	movs	r3, #3
    1394:	e2e5      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
    1396:	4b77      	ldr	r3, [pc, #476]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    139e:	2b00      	cmp	r3, #0
    13a0:	d1f0      	bne.n	1384 <HAL_RCC_OscConfig+0x2d4>
    13a2:	e000      	b.n	13a6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    13a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	681b      	ldr	r3, [r3, #0]
    13aa:	f003 0302 	and.w	r3, r3, #2
    13ae:	2b00      	cmp	r3, #0
    13b0:	d060      	beq.n	1474 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
    13b2:	6a3b      	ldr	r3, [r7, #32]
    13b4:	2b04      	cmp	r3, #4
    13b6:	d005      	beq.n	13c4 <HAL_RCC_OscConfig+0x314>
    13b8:	6a3b      	ldr	r3, [r7, #32]
    13ba:	2b0c      	cmp	r3, #12
    13bc:	d119      	bne.n	13f2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
    13be:	69fb      	ldr	r3, [r7, #28]
    13c0:	2b02      	cmp	r3, #2
    13c2:	d116      	bne.n	13f2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
    13c4:	4b6b      	ldr	r3, [pc, #428]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    13c6:	681b      	ldr	r3, [r3, #0]
    13c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    13cc:	2b00      	cmp	r3, #0
    13ce:	d005      	beq.n	13dc <HAL_RCC_OscConfig+0x32c>
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	68db      	ldr	r3, [r3, #12]
    13d4:	2b00      	cmp	r3, #0
    13d6:	d101      	bne.n	13dc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
    13d8:	2301      	movs	r3, #1
    13da:	e2c2      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    13dc:	4b65      	ldr	r3, [pc, #404]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    13de:	685b      	ldr	r3, [r3, #4]
    13e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	691b      	ldr	r3, [r3, #16]
    13e8:	061b      	lsls	r3, r3, #24
    13ea:	4962      	ldr	r1, [pc, #392]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    13ec:	4313      	orrs	r3, r2
    13ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
    13f0:	e040      	b.n	1474 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
    13f2:	687b      	ldr	r3, [r7, #4]
    13f4:	68db      	ldr	r3, [r3, #12]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d023      	beq.n	1442 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    13fa:	4b5e      	ldr	r3, [pc, #376]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    13fc:	681b      	ldr	r3, [r3, #0]
    13fe:	4a5d      	ldr	r2, [pc, #372]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    1406:	f7ff fb1d 	bl	a44 <HAL_GetTick>
    140a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
    140c:	e008      	b.n	1420 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
    140e:	f7ff fb19 	bl	a44 <HAL_GetTick>
    1412:	4602      	mov	r2, r0
    1414:	69bb      	ldr	r3, [r7, #24]
    1416:	1ad3      	subs	r3, r2, r3
    1418:	2b02      	cmp	r3, #2
    141a:	d901      	bls.n	1420 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
    141c:	2303      	movs	r3, #3
    141e:	e2a0      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
    1420:	4b54      	ldr	r3, [pc, #336]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1428:	2b00      	cmp	r3, #0
    142a:	d0f0      	beq.n	140e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    142c:	4b51      	ldr	r3, [pc, #324]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    142e:	685b      	ldr	r3, [r3, #4]
    1430:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	691b      	ldr	r3, [r3, #16]
    1438:	061b      	lsls	r3, r3, #24
    143a:	494e      	ldr	r1, [pc, #312]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    143c:	4313      	orrs	r3, r2
    143e:	604b      	str	r3, [r1, #4]
    1440:	e018      	b.n	1474 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    1442:	4b4c      	ldr	r3, [pc, #304]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	4a4b      	ldr	r2, [pc, #300]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    144c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    144e:	f7ff faf9 	bl	a44 <HAL_GetTick>
    1452:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
    1454:	e008      	b.n	1468 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
    1456:	f7ff faf5 	bl	a44 <HAL_GetTick>
    145a:	4602      	mov	r2, r0
    145c:	69bb      	ldr	r3, [r7, #24]
    145e:	1ad3      	subs	r3, r2, r3
    1460:	2b02      	cmp	r3, #2
    1462:	d901      	bls.n	1468 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
    1464:	2303      	movs	r3, #3
    1466:	e27c      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
    1468:	4b42      	ldr	r3, [pc, #264]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1470:	2b00      	cmp	r3, #0
    1472:	d1f0      	bne.n	1456 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	f003 0308 	and.w	r3, r3, #8
    147c:	2b00      	cmp	r3, #0
    147e:	f000 8082 	beq.w	1586 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	695b      	ldr	r3, [r3, #20]
    1486:	2b00      	cmp	r3, #0
    1488:	d05f      	beq.n	154a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
    148a:	4b3a      	ldr	r3, [pc, #232]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1490:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
    1492:	687b      	ldr	r3, [r7, #4]
    1494:	699a      	ldr	r2, [r3, #24]
    1496:	693b      	ldr	r3, [r7, #16]
    1498:	f003 0310 	and.w	r3, r3, #16
    149c:	429a      	cmp	r2, r3
    149e:	d037      	beq.n	1510 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
    14a0:	693b      	ldr	r3, [r7, #16]
    14a2:	f003 0302 	and.w	r3, r3, #2
    14a6:	2b00      	cmp	r3, #0
    14a8:	d006      	beq.n	14b8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
    14aa:	693b      	ldr	r3, [r7, #16]
    14ac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
    14b0:	2b00      	cmp	r3, #0
    14b2:	d101      	bne.n	14b8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
    14b4:	2301      	movs	r3, #1
    14b6:	e254      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
    14b8:	693b      	ldr	r3, [r7, #16]
    14ba:	f003 0301 	and.w	r3, r3, #1
    14be:	2b00      	cmp	r3, #0
    14c0:	d01b      	beq.n	14fa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
    14c2:	4b2c      	ldr	r3, [pc, #176]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    14c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    14c8:	4a2a      	ldr	r2, [pc, #168]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    14ca:	f023 0301 	bic.w	r3, r3, #1
    14ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
    14d2:	f7ff fab7 	bl	a44 <HAL_GetTick>
    14d6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
    14d8:	e008      	b.n	14ec <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
    14da:	f7ff fab3 	bl	a44 <HAL_GetTick>
    14de:	4602      	mov	r2, r0
    14e0:	69bb      	ldr	r3, [r7, #24]
    14e2:	1ad3      	subs	r3, r2, r3
    14e4:	2b11      	cmp	r3, #17
    14e6:	d901      	bls.n	14ec <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
    14e8:	2303      	movs	r3, #3
    14ea:	e23a      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
    14ec:	4b21      	ldr	r3, [pc, #132]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    14ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    14f2:	f003 0302 	and.w	r3, r3, #2
    14f6:	2b00      	cmp	r3, #0
    14f8:	d1ef      	bne.n	14da <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
    14fa:	4b1e      	ldr	r3, [pc, #120]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    14fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1500:	f023 0210 	bic.w	r2, r3, #16
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	699b      	ldr	r3, [r3, #24]
    1508:	491a      	ldr	r1, [pc, #104]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    150a:	4313      	orrs	r3, r2
    150c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    1510:	4b18      	ldr	r3, [pc, #96]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1516:	4a17      	ldr	r2, [pc, #92]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1518:	f043 0301 	orr.w	r3, r3, #1
    151c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    1520:	f7ff fa90 	bl	a44 <HAL_GetTick>
    1524:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
    1526:	e008      	b.n	153a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
    1528:	f7ff fa8c 	bl	a44 <HAL_GetTick>
    152c:	4602      	mov	r2, r0
    152e:	69bb      	ldr	r3, [r7, #24]
    1530:	1ad3      	subs	r3, r2, r3
    1532:	2b11      	cmp	r3, #17
    1534:	d901      	bls.n	153a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
    1536:	2303      	movs	r3, #3
    1538:	e213      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
    153a:	4b0e      	ldr	r3, [pc, #56]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1540:	f003 0302 	and.w	r3, r3, #2
    1544:	2b00      	cmp	r3, #0
    1546:	d0ef      	beq.n	1528 <HAL_RCC_OscConfig+0x478>
    1548:	e01d      	b.n	1586 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    154a:	4b0a      	ldr	r3, [pc, #40]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    154c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1550:	4a08      	ldr	r2, [pc, #32]	; (1574 <HAL_RCC_OscConfig+0x4c4>)
    1552:	f023 0301 	bic.w	r3, r3, #1
    1556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    155a:	f7ff fa73 	bl	a44 <HAL_GetTick>
    155e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
    1560:	e00a      	b.n	1578 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
    1562:	f7ff fa6f 	bl	a44 <HAL_GetTick>
    1566:	4602      	mov	r2, r0
    1568:	69bb      	ldr	r3, [r7, #24]
    156a:	1ad3      	subs	r3, r2, r3
    156c:	2b11      	cmp	r3, #17
    156e:	d903      	bls.n	1578 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
    1570:	2303      	movs	r3, #3
    1572:	e1f6      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
    1574:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
    1578:	4ba9      	ldr	r3, [pc, #676]	; (1820 <HAL_RCC_OscConfig+0x770>)
    157a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    157e:	f003 0302 	and.w	r3, r3, #2
    1582:	2b00      	cmp	r3, #0
    1584:	d1ed      	bne.n	1562 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	f003 0304 	and.w	r3, r3, #4
    158e:	2b00      	cmp	r3, #0
    1590:	f000 80bd 	beq.w	170e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
    1594:	2300      	movs	r3, #0
    1596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
    159a:	4ba1      	ldr	r3, [pc, #644]	; (1820 <HAL_RCC_OscConfig+0x770>)
    159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    15a2:	2b00      	cmp	r3, #0
    15a4:	d10e      	bne.n	15c4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    15a6:	4b9e      	ldr	r3, [pc, #632]	; (1820 <HAL_RCC_OscConfig+0x770>)
    15a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    15aa:	4a9d      	ldr	r2, [pc, #628]	; (1820 <HAL_RCC_OscConfig+0x770>)
    15ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    15b0:	6593      	str	r3, [r2, #88]	; 0x58
    15b2:	4b9b      	ldr	r3, [pc, #620]	; (1820 <HAL_RCC_OscConfig+0x770>)
    15b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    15b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    15ba:	60fb      	str	r3, [r7, #12]
    15bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
    15be:	2301      	movs	r3, #1
    15c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    15c4:	4b97      	ldr	r3, [pc, #604]	; (1824 <HAL_RCC_OscConfig+0x774>)
    15c6:	681b      	ldr	r3, [r3, #0]
    15c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    15cc:	2b00      	cmp	r3, #0
    15ce:	d118      	bne.n	1602 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
    15d0:	4b94      	ldr	r3, [pc, #592]	; (1824 <HAL_RCC_OscConfig+0x774>)
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	4a93      	ldr	r2, [pc, #588]	; (1824 <HAL_RCC_OscConfig+0x774>)
    15d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    15da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    15dc:	f7ff fa32 	bl	a44 <HAL_GetTick>
    15e0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    15e2:	e008      	b.n	15f6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    15e4:	f7ff fa2e 	bl	a44 <HAL_GetTick>
    15e8:	4602      	mov	r2, r0
    15ea:	69bb      	ldr	r3, [r7, #24]
    15ec:	1ad3      	subs	r3, r2, r3
    15ee:	2b02      	cmp	r3, #2
    15f0:	d901      	bls.n	15f6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
    15f2:	2303      	movs	r3, #3
    15f4:	e1b5      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    15f6:	4b8b      	ldr	r3, [pc, #556]	; (1824 <HAL_RCC_OscConfig+0x774>)
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    15fe:	2b00      	cmp	r3, #0
    1600:	d0f0      	beq.n	15e4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	689b      	ldr	r3, [r3, #8]
    1606:	f003 0301 	and.w	r3, r3, #1
    160a:	2b00      	cmp	r3, #0
    160c:	d02c      	beq.n	1668 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
    160e:	4b84      	ldr	r3, [pc, #528]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1614:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	689b      	ldr	r3, [r3, #8]
    161c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1620:	497f      	ldr	r1, [pc, #508]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1622:	4313      	orrs	r3, r2
    1624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	689b      	ldr	r3, [r3, #8]
    162c:	f003 0304 	and.w	r3, r3, #4
    1630:	2b00      	cmp	r3, #0
    1632:	d010      	beq.n	1656 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    1634:	4b7a      	ldr	r3, [pc, #488]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    163a:	4a79      	ldr	r2, [pc, #484]	; (1820 <HAL_RCC_OscConfig+0x770>)
    163c:	f043 0304 	orr.w	r3, r3, #4
    1640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
    1644:	4b76      	ldr	r3, [pc, #472]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    164a:	4a75      	ldr	r2, [pc, #468]	; (1820 <HAL_RCC_OscConfig+0x770>)
    164c:	f043 0301 	orr.w	r3, r3, #1
    1650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    1654:	e018      	b.n	1688 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
    1656:	4b72      	ldr	r3, [pc, #456]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    165c:	4a70      	ldr	r2, [pc, #448]	; (1820 <HAL_RCC_OscConfig+0x770>)
    165e:	f043 0301 	orr.w	r3, r3, #1
    1662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    1666:	e00f      	b.n	1688 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
    1668:	4b6d      	ldr	r3, [pc, #436]	; (1820 <HAL_RCC_OscConfig+0x770>)
    166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    166e:	4a6c      	ldr	r2, [pc, #432]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1670:	f023 0301 	bic.w	r3, r3, #1
    1674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    1678:	4b69      	ldr	r3, [pc, #420]	; (1820 <HAL_RCC_OscConfig+0x770>)
    167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    167e:	4a68      	ldr	r2, [pc, #416]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1680:	f023 0304 	bic.w	r3, r3, #4
    1684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	689b      	ldr	r3, [r3, #8]
    168c:	2b00      	cmp	r3, #0
    168e:	d016      	beq.n	16be <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    1690:	f7ff f9d8 	bl	a44 <HAL_GetTick>
    1694:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
    1696:	e00a      	b.n	16ae <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    1698:	f7ff f9d4 	bl	a44 <HAL_GetTick>
    169c:	4602      	mov	r2, r0
    169e:	69bb      	ldr	r3, [r7, #24]
    16a0:	1ad3      	subs	r3, r2, r3
    16a2:	f241 3288 	movw	r2, #5000	; 0x1388
    16a6:	4293      	cmp	r3, r2
    16a8:	d901      	bls.n	16ae <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
    16aa:	2303      	movs	r3, #3
    16ac:	e159      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
    16ae:	4b5c      	ldr	r3, [pc, #368]	; (1820 <HAL_RCC_OscConfig+0x770>)
    16b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    16b4:	f003 0302 	and.w	r3, r3, #2
    16b8:	2b00      	cmp	r3, #0
    16ba:	d0ed      	beq.n	1698 <HAL_RCC_OscConfig+0x5e8>
    16bc:	e01d      	b.n	16fa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    16be:	f7ff f9c1 	bl	a44 <HAL_GetTick>
    16c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
    16c4:	e00a      	b.n	16dc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    16c6:	f7ff f9bd 	bl	a44 <HAL_GetTick>
    16ca:	4602      	mov	r2, r0
    16cc:	69bb      	ldr	r3, [r7, #24]
    16ce:	1ad3      	subs	r3, r2, r3
    16d0:	f241 3288 	movw	r2, #5000	; 0x1388
    16d4:	4293      	cmp	r3, r2
    16d6:	d901      	bls.n	16dc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
    16d8:	2303      	movs	r3, #3
    16da:	e142      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
    16dc:	4b50      	ldr	r3, [pc, #320]	; (1820 <HAL_RCC_OscConfig+0x770>)
    16de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    16e2:	f003 0302 	and.w	r3, r3, #2
    16e6:	2b00      	cmp	r3, #0
    16e8:	d1ed      	bne.n	16c6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
    16ea:	4b4d      	ldr	r3, [pc, #308]	; (1820 <HAL_RCC_OscConfig+0x770>)
    16ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    16f0:	4a4b      	ldr	r2, [pc, #300]	; (1820 <HAL_RCC_OscConfig+0x770>)
    16f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    16f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
    16fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    16fe:	2b01      	cmp	r3, #1
    1700:	d105      	bne.n	170e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    1702:	4b47      	ldr	r3, [pc, #284]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1706:	4a46      	ldr	r2, [pc, #280]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    170c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	f003 0320 	and.w	r3, r3, #32
    1716:	2b00      	cmp	r3, #0
    1718:	d03c      	beq.n	1794 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    171e:	2b00      	cmp	r3, #0
    1720:	d01c      	beq.n	175c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
    1722:	4b3f      	ldr	r3, [pc, #252]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1728:	4a3d      	ldr	r2, [pc, #244]	; (1820 <HAL_RCC_OscConfig+0x770>)
    172a:	f043 0301 	orr.w	r3, r3, #1
    172e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    1732:	f7ff f987 	bl	a44 <HAL_GetTick>
    1736:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
    1738:	e008      	b.n	174c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
    173a:	f7ff f983 	bl	a44 <HAL_GetTick>
    173e:	4602      	mov	r2, r0
    1740:	69bb      	ldr	r3, [r7, #24]
    1742:	1ad3      	subs	r3, r2, r3
    1744:	2b02      	cmp	r3, #2
    1746:	d901      	bls.n	174c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
    1748:	2303      	movs	r3, #3
    174a:	e10a      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
    174c:	4b34      	ldr	r3, [pc, #208]	; (1820 <HAL_RCC_OscConfig+0x770>)
    174e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1752:	f003 0302 	and.w	r3, r3, #2
    1756:	2b00      	cmp	r3, #0
    1758:	d0ef      	beq.n	173a <HAL_RCC_OscConfig+0x68a>
    175a:	e01b      	b.n	1794 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
    175c:	4b30      	ldr	r3, [pc, #192]	; (1820 <HAL_RCC_OscConfig+0x770>)
    175e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    1762:	4a2f      	ldr	r2, [pc, #188]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1764:	f023 0301 	bic.w	r3, r3, #1
    1768:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    176c:	f7ff f96a 	bl	a44 <HAL_GetTick>
    1770:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
    1772:	e008      	b.n	1786 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
    1774:	f7ff f966 	bl	a44 <HAL_GetTick>
    1778:	4602      	mov	r2, r0
    177a:	69bb      	ldr	r3, [r7, #24]
    177c:	1ad3      	subs	r3, r2, r3
    177e:	2b02      	cmp	r3, #2
    1780:	d901      	bls.n	1786 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
    1782:	2303      	movs	r3, #3
    1784:	e0ed      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
    1786:	4b26      	ldr	r3, [pc, #152]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    178c:	f003 0302 	and.w	r3, r3, #2
    1790:	2b00      	cmp	r3, #0
    1792:	d1ef      	bne.n	1774 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1798:	2b00      	cmp	r3, #0
    179a:	f000 80e1 	beq.w	1960 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17a2:	2b02      	cmp	r3, #2
    17a4:	f040 80b5 	bne.w	1912 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
    17a8:	4b1d      	ldr	r3, [pc, #116]	; (1820 <HAL_RCC_OscConfig+0x770>)
    17aa:	68db      	ldr	r3, [r3, #12]
    17ac:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
    17ae:	69fb      	ldr	r3, [r7, #28]
    17b0:	f003 0203 	and.w	r2, r3, #3
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    17b8:	429a      	cmp	r2, r3
    17ba:	d124      	bne.n	1806 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
    17bc:	69fb      	ldr	r3, [r7, #28]
    17be:	f003 0270 	and.w	r2, r3, #112	; 0x70
    17c2:	687b      	ldr	r3, [r7, #4]
    17c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    17c6:	3b01      	subs	r3, #1
    17c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
    17ca:	429a      	cmp	r2, r3
    17cc:	d11b      	bne.n	1806 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
    17ce:	69fb      	ldr	r3, [r7, #28]
    17d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    17d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
    17da:	429a      	cmp	r2, r3
    17dc:	d113      	bne.n	1806 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
    17de:	69fb      	ldr	r3, [r7, #28]
    17e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
    17e4:	687b      	ldr	r3, [r7, #4]
    17e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    17e8:	085b      	lsrs	r3, r3, #1
    17ea:	3b01      	subs	r3, #1
    17ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
    17ee:	429a      	cmp	r2, r3
    17f0:	d109      	bne.n	1806 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
    17f2:	69fb      	ldr	r3, [r7, #28]
    17f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    17fc:	085b      	lsrs	r3, r3, #1
    17fe:	3b01      	subs	r3, #1
    1800:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
    1802:	429a      	cmp	r2, r3
    1804:	d05f      	beq.n	18c6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
    1806:	6a3b      	ldr	r3, [r7, #32]
    1808:	2b0c      	cmp	r3, #12
    180a:	d05a      	beq.n	18c2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
    180c:	4b04      	ldr	r3, [pc, #16]	; (1820 <HAL_RCC_OscConfig+0x770>)
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	4a03      	ldr	r2, [pc, #12]	; (1820 <HAL_RCC_OscConfig+0x770>)
    1812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    1816:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
    1818:	f7ff f914 	bl	a44 <HAL_GetTick>
    181c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
    181e:	e00c      	b.n	183a <HAL_RCC_OscConfig+0x78a>
    1820:	40021000 	.word	0x40021000
    1824:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    1828:	f7ff f90c 	bl	a44 <HAL_GetTick>
    182c:	4602      	mov	r2, r0
    182e:	69bb      	ldr	r3, [r7, #24]
    1830:	1ad3      	subs	r3, r2, r3
    1832:	2b02      	cmp	r3, #2
    1834:	d901      	bls.n	183a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
    1836:	2303      	movs	r3, #3
    1838:	e093      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
    183a:	4b4c      	ldr	r3, [pc, #304]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    183c:	681b      	ldr	r3, [r3, #0]
    183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    1842:	2b00      	cmp	r3, #0
    1844:	d1f0      	bne.n	1828 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
    1846:	4b49      	ldr	r3, [pc, #292]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1848:	68da      	ldr	r2, [r3, #12]
    184a:	4b49      	ldr	r3, [pc, #292]	; (1970 <HAL_RCC_OscConfig+0x8c0>)
    184c:	4013      	ands	r3, r2
    184e:	687a      	ldr	r2, [r7, #4]
    1850:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1852:	687a      	ldr	r2, [r7, #4]
    1854:	6b52      	ldr	r2, [r2, #52]	; 0x34
    1856:	3a01      	subs	r2, #1
    1858:	0112      	lsls	r2, r2, #4
    185a:	4311      	orrs	r1, r2
    185c:	687a      	ldr	r2, [r7, #4]
    185e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    1860:	0212      	lsls	r2, r2, #8
    1862:	4311      	orrs	r1, r2
    1864:	687a      	ldr	r2, [r7, #4]
    1866:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    1868:	0852      	lsrs	r2, r2, #1
    186a:	3a01      	subs	r2, #1
    186c:	0552      	lsls	r2, r2, #21
    186e:	4311      	orrs	r1, r2
    1870:	687a      	ldr	r2, [r7, #4]
    1872:	6c12      	ldr	r2, [r2, #64]	; 0x40
    1874:	0852      	lsrs	r2, r2, #1
    1876:	3a01      	subs	r2, #1
    1878:	0652      	lsls	r2, r2, #25
    187a:	430a      	orrs	r2, r1
    187c:	493b      	ldr	r1, [pc, #236]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    187e:	4313      	orrs	r3, r2
    1880:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
    1882:	4b3a      	ldr	r3, [pc, #232]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1884:	681b      	ldr	r3, [r3, #0]
    1886:	4a39      	ldr	r2, [pc, #228]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    188c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
    188e:	4b37      	ldr	r3, [pc, #220]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1890:	68db      	ldr	r3, [r3, #12]
    1892:	4a36      	ldr	r2, [pc, #216]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1898:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
    189a:	f7ff f8d3 	bl	a44 <HAL_GetTick>
    189e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
    18a0:	e008      	b.n	18b4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    18a2:	f7ff f8cf 	bl	a44 <HAL_GetTick>
    18a6:	4602      	mov	r2, r0
    18a8:	69bb      	ldr	r3, [r7, #24]
    18aa:	1ad3      	subs	r3, r2, r3
    18ac:	2b02      	cmp	r3, #2
    18ae:	d901      	bls.n	18b4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
    18b0:	2303      	movs	r3, #3
    18b2:	e056      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
    18b4:	4b2d      	ldr	r3, [pc, #180]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    18bc:	2b00      	cmp	r3, #0
    18be:	d0f0      	beq.n	18a2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
    18c0:	e04e      	b.n	1960 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
    18c2:	2301      	movs	r3, #1
    18c4:	e04d      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
    18c6:	4b29      	ldr	r3, [pc, #164]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    18ce:	2b00      	cmp	r3, #0
    18d0:	d146      	bne.n	1960 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
    18d2:	4b26      	ldr	r3, [pc, #152]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	4a25      	ldr	r2, [pc, #148]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    18d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    18dc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
    18de:	4b23      	ldr	r3, [pc, #140]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    18e0:	68db      	ldr	r3, [r3, #12]
    18e2:	4a22      	ldr	r2, [pc, #136]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    18e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    18e8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
    18ea:	f7ff f8ab 	bl	a44 <HAL_GetTick>
    18ee:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
    18f0:	e008      	b.n	1904 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    18f2:	f7ff f8a7 	bl	a44 <HAL_GetTick>
    18f6:	4602      	mov	r2, r0
    18f8:	69bb      	ldr	r3, [r7, #24]
    18fa:	1ad3      	subs	r3, r2, r3
    18fc:	2b02      	cmp	r3, #2
    18fe:	d901      	bls.n	1904 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
    1900:	2303      	movs	r3, #3
    1902:	e02e      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
    1904:	4b19      	ldr	r3, [pc, #100]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    190c:	2b00      	cmp	r3, #0
    190e:	d0f0      	beq.n	18f2 <HAL_RCC_OscConfig+0x842>
    1910:	e026      	b.n	1960 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
    1912:	6a3b      	ldr	r3, [r7, #32]
    1914:	2b0c      	cmp	r3, #12
    1916:	d021      	beq.n	195c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    1918:	4b14      	ldr	r3, [pc, #80]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	4a13      	ldr	r2, [pc, #76]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    191e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    1922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    1924:	f7ff f88e 	bl	a44 <HAL_GetTick>
    1928:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
    192a:	e008      	b.n	193e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    192c:	f7ff f88a 	bl	a44 <HAL_GetTick>
    1930:	4602      	mov	r2, r0
    1932:	69bb      	ldr	r3, [r7, #24]
    1934:	1ad3      	subs	r3, r2, r3
    1936:	2b02      	cmp	r3, #2
    1938:	d901      	bls.n	193e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
    193a:	2303      	movs	r3, #3
    193c:	e011      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
    193e:	4b0b      	ldr	r3, [pc, #44]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    1946:	2b00      	cmp	r3, #0
    1948:	d1f0      	bne.n	192c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
    194a:	4b08      	ldr	r3, [pc, #32]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    194c:	68db      	ldr	r3, [r3, #12]
    194e:	4a07      	ldr	r2, [pc, #28]	; (196c <HAL_RCC_OscConfig+0x8bc>)
    1950:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
    1954:	f023 0303 	bic.w	r3, r3, #3
    1958:	60d3      	str	r3, [r2, #12]
    195a:	e001      	b.n	1960 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
    195c:	2301      	movs	r3, #1
    195e:	e000      	b.n	1962 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
    1960:	2300      	movs	r3, #0
}
    1962:	4618      	mov	r0, r3
    1964:	3728      	adds	r7, #40	; 0x28
    1966:	46bd      	mov	sp, r7
    1968:	bd80      	pop	{r7, pc}
    196a:	bf00      	nop
    196c:	40021000 	.word	0x40021000
    1970:	f99f808c 	.word	0xf99f808c

00001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    1974:	b580      	push	{r7, lr}
    1976:	b084      	sub	sp, #16
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	2b00      	cmp	r3, #0
    1982:	d101      	bne.n	1988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
    1984:	2301      	movs	r3, #1
    1986:	e0e7      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
    1988:	4b75      	ldr	r3, [pc, #468]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	f003 0307 	and.w	r3, r3, #7
    1990:	683a      	ldr	r2, [r7, #0]
    1992:	429a      	cmp	r2, r3
    1994:	d910      	bls.n	19b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    1996:	4b72      	ldr	r3, [pc, #456]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	f023 0207 	bic.w	r2, r3, #7
    199e:	4970      	ldr	r1, [pc, #448]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    19a0:	683b      	ldr	r3, [r7, #0]
    19a2:	4313      	orrs	r3, r2
    19a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    19a6:	4b6e      	ldr	r3, [pc, #440]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    19a8:	681b      	ldr	r3, [r3, #0]
    19aa:	f003 0307 	and.w	r3, r3, #7
    19ae:	683a      	ldr	r2, [r7, #0]
    19b0:	429a      	cmp	r2, r3
    19b2:	d001      	beq.n	19b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
    19b4:	2301      	movs	r3, #1
    19b6:	e0cf      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	681b      	ldr	r3, [r3, #0]
    19bc:	f003 0302 	and.w	r3, r3, #2
    19c0:	2b00      	cmp	r3, #0
    19c2:	d010      	beq.n	19e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	689a      	ldr	r2, [r3, #8]
    19c8:	4b66      	ldr	r3, [pc, #408]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    19ca:	689b      	ldr	r3, [r3, #8]
    19cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    19d0:	429a      	cmp	r2, r3
    19d2:	d908      	bls.n	19e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    19d4:	4b63      	ldr	r3, [pc, #396]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    19d6:	689b      	ldr	r3, [r3, #8]
    19d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	689b      	ldr	r3, [r3, #8]
    19e0:	4960      	ldr	r1, [pc, #384]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    19e2:	4313      	orrs	r3, r2
    19e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	f003 0301 	and.w	r3, r3, #1
    19ee:	2b00      	cmp	r3, #0
    19f0:	d04c      	beq.n	1a8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    19f2:	687b      	ldr	r3, [r7, #4]
    19f4:	685b      	ldr	r3, [r3, #4]
    19f6:	2b03      	cmp	r3, #3
    19f8:	d107      	bne.n	1a0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
    19fa:	4b5a      	ldr	r3, [pc, #360]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    19fc:	681b      	ldr	r3, [r3, #0]
    19fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    1a02:	2b00      	cmp	r3, #0
    1a04:	d121      	bne.n	1a4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
    1a06:	2301      	movs	r3, #1
    1a08:	e0a6      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	685b      	ldr	r3, [r3, #4]
    1a0e:	2b02      	cmp	r3, #2
    1a10:	d107      	bne.n	1a22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
    1a12:	4b54      	ldr	r3, [pc, #336]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1a14:	681b      	ldr	r3, [r3, #0]
    1a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d115      	bne.n	1a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
    1a1e:	2301      	movs	r3, #1
    1a20:	e09a      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	685b      	ldr	r3, [r3, #4]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d107      	bne.n	1a3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
    1a2a:	4b4e      	ldr	r3, [pc, #312]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1a2c:	681b      	ldr	r3, [r3, #0]
    1a2e:	f003 0302 	and.w	r3, r3, #2
    1a32:	2b00      	cmp	r3, #0
    1a34:	d109      	bne.n	1a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
    1a36:	2301      	movs	r3, #1
    1a38:	e08e      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
    1a3a:	4b4a      	ldr	r3, [pc, #296]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1a3c:	681b      	ldr	r3, [r3, #0]
    1a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1a42:	2b00      	cmp	r3, #0
    1a44:	d101      	bne.n	1a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
    1a46:	2301      	movs	r3, #1
    1a48:	e086      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
    1a4a:	4b46      	ldr	r3, [pc, #280]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1a4c:	689b      	ldr	r3, [r3, #8]
    1a4e:	f023 0203 	bic.w	r2, r3, #3
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	685b      	ldr	r3, [r3, #4]
    1a56:	4943      	ldr	r1, [pc, #268]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1a58:	4313      	orrs	r3, r2
    1a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    1a5c:	f7fe fff2 	bl	a44 <HAL_GetTick>
    1a60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    1a62:	e00a      	b.n	1a7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
    1a64:	f7fe ffee 	bl	a44 <HAL_GetTick>
    1a68:	4602      	mov	r2, r0
    1a6a:	68fb      	ldr	r3, [r7, #12]
    1a6c:	1ad3      	subs	r3, r2, r3
    1a6e:	f241 3288 	movw	r2, #5000	; 0x1388
    1a72:	4293      	cmp	r3, r2
    1a74:	d901      	bls.n	1a7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
    1a76:	2303      	movs	r3, #3
    1a78:	e06e      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    1a7a:	4b3a      	ldr	r3, [pc, #232]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1a7c:	689b      	ldr	r3, [r3, #8]
    1a7e:	f003 020c 	and.w	r2, r3, #12
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	685b      	ldr	r3, [r3, #4]
    1a86:	009b      	lsls	r3, r3, #2
    1a88:	429a      	cmp	r2, r3
    1a8a:	d1eb      	bne.n	1a64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	f003 0302 	and.w	r3, r3, #2
    1a94:	2b00      	cmp	r3, #0
    1a96:	d010      	beq.n	1aba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	689a      	ldr	r2, [r3, #8]
    1a9c:	4b31      	ldr	r3, [pc, #196]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1a9e:	689b      	ldr	r3, [r3, #8]
    1aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1aa4:	429a      	cmp	r2, r3
    1aa6:	d208      	bcs.n	1aba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    1aa8:	4b2e      	ldr	r3, [pc, #184]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1aaa:	689b      	ldr	r3, [r3, #8]
    1aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	689b      	ldr	r3, [r3, #8]
    1ab4:	492b      	ldr	r1, [pc, #172]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1ab6:	4313      	orrs	r3, r2
    1ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
    1aba:	4b29      	ldr	r3, [pc, #164]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    1abc:	681b      	ldr	r3, [r3, #0]
    1abe:	f003 0307 	and.w	r3, r3, #7
    1ac2:	683a      	ldr	r2, [r7, #0]
    1ac4:	429a      	cmp	r2, r3
    1ac6:	d210      	bcs.n	1aea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    1ac8:	4b25      	ldr	r3, [pc, #148]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	f023 0207 	bic.w	r2, r3, #7
    1ad0:	4923      	ldr	r1, [pc, #140]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    1ad2:	683b      	ldr	r3, [r7, #0]
    1ad4:	4313      	orrs	r3, r2
    1ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    1ad8:	4b21      	ldr	r3, [pc, #132]	; (1b60 <HAL_RCC_ClockConfig+0x1ec>)
    1ada:	681b      	ldr	r3, [r3, #0]
    1adc:	f003 0307 	and.w	r3, r3, #7
    1ae0:	683a      	ldr	r2, [r7, #0]
    1ae2:	429a      	cmp	r2, r3
    1ae4:	d001      	beq.n	1aea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
    1ae6:	2301      	movs	r3, #1
    1ae8:	e036      	b.n	1b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	f003 0304 	and.w	r3, r3, #4
    1af2:	2b00      	cmp	r3, #0
    1af4:	d008      	beq.n	1b08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
    1af6:	4b1b      	ldr	r3, [pc, #108]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1af8:	689b      	ldr	r3, [r3, #8]
    1afa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	68db      	ldr	r3, [r3, #12]
    1b02:	4918      	ldr	r1, [pc, #96]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1b04:	4313      	orrs	r3, r2
    1b06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	f003 0308 	and.w	r3, r3, #8
    1b10:	2b00      	cmp	r3, #0
    1b12:	d009      	beq.n	1b28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
    1b14:	4b13      	ldr	r3, [pc, #76]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1b16:	689b      	ldr	r3, [r3, #8]
    1b18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	691b      	ldr	r3, [r3, #16]
    1b20:	00db      	lsls	r3, r3, #3
    1b22:	4910      	ldr	r1, [pc, #64]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1b24:	4313      	orrs	r3, r2
    1b26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
    1b28:	f000 f824 	bl	1b74 <HAL_RCC_GetSysClockFreq>
    1b2c:	4602      	mov	r2, r0
    1b2e:	4b0d      	ldr	r3, [pc, #52]	; (1b64 <HAL_RCC_ClockConfig+0x1f0>)
    1b30:	689b      	ldr	r3, [r3, #8]
    1b32:	091b      	lsrs	r3, r3, #4
    1b34:	f003 030f 	and.w	r3, r3, #15
    1b38:	490b      	ldr	r1, [pc, #44]	; (1b68 <HAL_RCC_ClockConfig+0x1f4>)
    1b3a:	5ccb      	ldrb	r3, [r1, r3]
    1b3c:	f003 031f 	and.w	r3, r3, #31
    1b40:	fa22 f303 	lsr.w	r3, r2, r3
    1b44:	4a09      	ldr	r2, [pc, #36]	; (1b6c <HAL_RCC_ClockConfig+0x1f8>)
    1b46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
    1b48:	4b09      	ldr	r3, [pc, #36]	; (1b70 <HAL_RCC_ClockConfig+0x1fc>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	4618      	mov	r0, r3
    1b4e:	f7fe ff29 	bl	9a4 <HAL_InitTick>
    1b52:	4603      	mov	r3, r0
    1b54:	72fb      	strb	r3, [r7, #11]

  return status;
    1b56:	7afb      	ldrb	r3, [r7, #11]
}
    1b58:	4618      	mov	r0, r3
    1b5a:	3710      	adds	r7, #16
    1b5c:	46bd      	mov	sp, r7
    1b5e:	bd80      	pop	{r7, pc}
    1b60:	40022000 	.word	0x40022000
    1b64:	40021000 	.word	0x40021000
    1b68:	00003050 	.word	0x00003050
    1b6c:	20000000 	.word	0x20000000
    1b70:	20000004 	.word	0x20000004

00001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
    1b74:	b480      	push	{r7}
    1b76:	b089      	sub	sp, #36	; 0x24
    1b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
    1b7a:	2300      	movs	r3, #0
    1b7c:	61fb      	str	r3, [r7, #28]
    1b7e:	2300      	movs	r3, #0
    1b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
    1b82:	4b3e      	ldr	r3, [pc, #248]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1b84:	689b      	ldr	r3, [r3, #8]
    1b86:	f003 030c 	and.w	r3, r3, #12
    1b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
    1b8c:	4b3b      	ldr	r3, [pc, #236]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1b8e:	68db      	ldr	r3, [r3, #12]
    1b90:	f003 0303 	and.w	r3, r3, #3
    1b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
    1b96:	693b      	ldr	r3, [r7, #16]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d005      	beq.n	1ba8 <HAL_RCC_GetSysClockFreq+0x34>
    1b9c:	693b      	ldr	r3, [r7, #16]
    1b9e:	2b0c      	cmp	r3, #12
    1ba0:	d121      	bne.n	1be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
    1ba2:	68fb      	ldr	r3, [r7, #12]
    1ba4:	2b01      	cmp	r3, #1
    1ba6:	d11e      	bne.n	1be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
    1ba8:	4b34      	ldr	r3, [pc, #208]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	f003 0308 	and.w	r3, r3, #8
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d107      	bne.n	1bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
    1bb4:	4b31      	ldr	r3, [pc, #196]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1bba:	0a1b      	lsrs	r3, r3, #8
    1bbc:	f003 030f 	and.w	r3, r3, #15
    1bc0:	61fb      	str	r3, [r7, #28]
    1bc2:	e005      	b.n	1bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    1bc4:	4b2d      	ldr	r3, [pc, #180]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1bc6:	681b      	ldr	r3, [r3, #0]
    1bc8:	091b      	lsrs	r3, r3, #4
    1bca:	f003 030f 	and.w	r3, r3, #15
    1bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
    1bd0:	4a2b      	ldr	r2, [pc, #172]	; (1c80 <HAL_RCC_GetSysClockFreq+0x10c>)
    1bd2:	69fb      	ldr	r3, [r7, #28]
    1bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
    1bda:	693b      	ldr	r3, [r7, #16]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d10d      	bne.n	1bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    1be0:	69fb      	ldr	r3, [r7, #28]
    1be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
    1be4:	e00a      	b.n	1bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
    1be6:	693b      	ldr	r3, [r7, #16]
    1be8:	2b04      	cmp	r3, #4
    1bea:	d102      	bne.n	1bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
    1bec:	4b25      	ldr	r3, [pc, #148]	; (1c84 <HAL_RCC_GetSysClockFreq+0x110>)
    1bee:	61bb      	str	r3, [r7, #24]
    1bf0:	e004      	b.n	1bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
    1bf2:	693b      	ldr	r3, [r7, #16]
    1bf4:	2b08      	cmp	r3, #8
    1bf6:	d101      	bne.n	1bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
    1bf8:	4b23      	ldr	r3, [pc, #140]	; (1c88 <HAL_RCC_GetSysClockFreq+0x114>)
    1bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
    1bfc:	693b      	ldr	r3, [r7, #16]
    1bfe:	2b0c      	cmp	r3, #12
    1c00:	d134      	bne.n	1c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
    1c02:	4b1e      	ldr	r3, [pc, #120]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1c04:	68db      	ldr	r3, [r3, #12]
    1c06:	f003 0303 	and.w	r3, r3, #3
    1c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
    1c0c:	68bb      	ldr	r3, [r7, #8]
    1c0e:	2b02      	cmp	r3, #2
    1c10:	d003      	beq.n	1c1a <HAL_RCC_GetSysClockFreq+0xa6>
    1c12:	68bb      	ldr	r3, [r7, #8]
    1c14:	2b03      	cmp	r3, #3
    1c16:	d003      	beq.n	1c20 <HAL_RCC_GetSysClockFreq+0xac>
    1c18:	e005      	b.n	1c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
    1c1a:	4b1a      	ldr	r3, [pc, #104]	; (1c84 <HAL_RCC_GetSysClockFreq+0x110>)
    1c1c:	617b      	str	r3, [r7, #20]
      break;
    1c1e:	e005      	b.n	1c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
    1c20:	4b19      	ldr	r3, [pc, #100]	; (1c88 <HAL_RCC_GetSysClockFreq+0x114>)
    1c22:	617b      	str	r3, [r7, #20]
      break;
    1c24:	e002      	b.n	1c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
    1c26:	69fb      	ldr	r3, [r7, #28]
    1c28:	617b      	str	r3, [r7, #20]
      break;
    1c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
    1c2c:	4b13      	ldr	r3, [pc, #76]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1c2e:	68db      	ldr	r3, [r3, #12]
    1c30:	091b      	lsrs	r3, r3, #4
    1c32:	f003 0307 	and.w	r3, r3, #7
    1c36:	3301      	adds	r3, #1
    1c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
    1c3a:	4b10      	ldr	r3, [pc, #64]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1c3c:	68db      	ldr	r3, [r3, #12]
    1c3e:	0a1b      	lsrs	r3, r3, #8
    1c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1c44:	697a      	ldr	r2, [r7, #20]
    1c46:	fb03 f202 	mul.w	r2, r3, r2
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	fbb2 f3f3 	udiv	r3, r2, r3
    1c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    1c52:	4b0a      	ldr	r3, [pc, #40]	; (1c7c <HAL_RCC_GetSysClockFreq+0x108>)
    1c54:	68db      	ldr	r3, [r3, #12]
    1c56:	0e5b      	lsrs	r3, r3, #25
    1c58:	f003 0303 	and.w	r3, r3, #3
    1c5c:	3301      	adds	r3, #1
    1c5e:	005b      	lsls	r3, r3, #1
    1c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
    1c62:	697a      	ldr	r2, [r7, #20]
    1c64:	683b      	ldr	r3, [r7, #0]
    1c66:	fbb2 f3f3 	udiv	r3, r2, r3
    1c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
    1c6c:	69bb      	ldr	r3, [r7, #24]
}
    1c6e:	4618      	mov	r0, r3
    1c70:	3724      	adds	r7, #36	; 0x24
    1c72:	46bd      	mov	sp, r7
    1c74:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c78:	4770      	bx	lr
    1c7a:	bf00      	nop
    1c7c:	40021000 	.word	0x40021000
    1c80:	00003068 	.word	0x00003068
    1c84:	00f42400 	.word	0x00f42400
    1c88:	007a1200 	.word	0x007a1200

00001c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    1c8c:	b480      	push	{r7}
    1c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    1c90:	4b03      	ldr	r3, [pc, #12]	; (1ca0 <HAL_RCC_GetHCLKFreq+0x14>)
    1c92:	681b      	ldr	r3, [r3, #0]
}
    1c94:	4618      	mov	r0, r3
    1c96:	46bd      	mov	sp, r7
    1c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c9c:	4770      	bx	lr
    1c9e:	bf00      	nop
    1ca0:	20000000 	.word	0x20000000

00001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    1ca4:	b580      	push	{r7, lr}
    1ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
    1ca8:	f7ff fff0 	bl	1c8c <HAL_RCC_GetHCLKFreq>
    1cac:	4602      	mov	r2, r0
    1cae:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
    1cb0:	689b      	ldr	r3, [r3, #8]
    1cb2:	0a1b      	lsrs	r3, r3, #8
    1cb4:	f003 0307 	and.w	r3, r3, #7
    1cb8:	4904      	ldr	r1, [pc, #16]	; (1ccc <HAL_RCC_GetPCLK1Freq+0x28>)
    1cba:	5ccb      	ldrb	r3, [r1, r3]
    1cbc:	f003 031f 	and.w	r3, r3, #31
    1cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
    1cc4:	4618      	mov	r0, r3
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	40021000 	.word	0x40021000
    1ccc:	00003060 	.word	0x00003060

00001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
    1cd4:	f7ff ffda 	bl	1c8c <HAL_RCC_GetHCLKFreq>
    1cd8:	4602      	mov	r2, r0
    1cda:	4b06      	ldr	r3, [pc, #24]	; (1cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
    1cdc:	689b      	ldr	r3, [r3, #8]
    1cde:	0adb      	lsrs	r3, r3, #11
    1ce0:	f003 0307 	and.w	r3, r3, #7
    1ce4:	4904      	ldr	r1, [pc, #16]	; (1cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
    1ce6:	5ccb      	ldrb	r3, [r1, r3]
    1ce8:	f003 031f 	and.w	r3, r3, #31
    1cec:	fa22 f303 	lsr.w	r3, r2, r3
}
    1cf0:	4618      	mov	r0, r3
    1cf2:	bd80      	pop	{r7, pc}
    1cf4:	40021000 	.word	0x40021000
    1cf8:	00003060 	.word	0x00003060

00001cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b086      	sub	sp, #24
    1d00:	af00      	add	r7, sp, #0
    1d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
    1d04:	2300      	movs	r3, #0
    1d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
    1d08:	4b2a      	ldr	r3, [pc, #168]	; (1db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
    1d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    1d10:	2b00      	cmp	r3, #0
    1d12:	d003      	beq.n	1d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
    1d14:	f7ff f968 	bl	fe8 <HAL_PWREx_GetVoltageRange>
    1d18:	6178      	str	r0, [r7, #20]
    1d1a:	e014      	b.n	1d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
    1d1c:	4b25      	ldr	r3, [pc, #148]	; (1db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
    1d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1d20:	4a24      	ldr	r2, [pc, #144]	; (1db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
    1d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1d26:	6593      	str	r3, [r2, #88]	; 0x58
    1d28:	4b22      	ldr	r3, [pc, #136]	; (1db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
    1d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    1d30:	60fb      	str	r3, [r7, #12]
    1d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
    1d34:	f7ff f958 	bl	fe8 <HAL_PWREx_GetVoltageRange>
    1d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
    1d3a:	4b1e      	ldr	r3, [pc, #120]	; (1db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
    1d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1d3e:	4a1d      	ldr	r2, [pc, #116]	; (1db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
    1d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    1d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
    1d46:	697b      	ldr	r3, [r7, #20]
    1d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1d4c:	d10b      	bne.n	1d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	2b80      	cmp	r3, #128	; 0x80
    1d52:	d919      	bls.n	1d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
    1d54:	687b      	ldr	r3, [r7, #4]
    1d56:	2ba0      	cmp	r3, #160	; 0xa0
    1d58:	d902      	bls.n	1d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
    1d5a:	2302      	movs	r3, #2
    1d5c:	613b      	str	r3, [r7, #16]
    1d5e:	e013      	b.n	1d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
    1d60:	2301      	movs	r3, #1
    1d62:	613b      	str	r3, [r7, #16]
    1d64:	e010      	b.n	1d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	2b80      	cmp	r3, #128	; 0x80
    1d6a:	d902      	bls.n	1d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    1d6c:	2303      	movs	r3, #3
    1d6e:	613b      	str	r3, [r7, #16]
    1d70:	e00a      	b.n	1d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	2b80      	cmp	r3, #128	; 0x80
    1d76:	d102      	bne.n	1d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
    1d78:	2302      	movs	r3, #2
    1d7a:	613b      	str	r3, [r7, #16]
    1d7c:	e004      	b.n	1d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	2b70      	cmp	r3, #112	; 0x70
    1d82:	d101      	bne.n	1d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
    1d84:	2301      	movs	r3, #1
    1d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
    1d88:	4b0b      	ldr	r3, [pc, #44]	; (1db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	f023 0207 	bic.w	r2, r3, #7
    1d90:	4909      	ldr	r1, [pc, #36]	; (1db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
    1d92:	693b      	ldr	r3, [r7, #16]
    1d94:	4313      	orrs	r3, r2
    1d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
    1d98:	4b07      	ldr	r3, [pc, #28]	; (1db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	f003 0307 	and.w	r3, r3, #7
    1da0:	693a      	ldr	r2, [r7, #16]
    1da2:	429a      	cmp	r2, r3
    1da4:	d001      	beq.n	1daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
    1da6:	2301      	movs	r3, #1
    1da8:	e000      	b.n	1dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
    1daa:	2300      	movs	r3, #0
}
    1dac:	4618      	mov	r0, r3
    1dae:	3718      	adds	r7, #24
    1db0:	46bd      	mov	sp, r7
    1db2:	bd80      	pop	{r7, pc}
    1db4:	40021000 	.word	0x40021000
    1db8:	40022000 	.word	0x40022000

00001dbc <HAL_RCCEx_PeriphCLKConfig>:
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b086      	sub	sp, #24
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
    1dc4:	2300      	movs	r3, #0
    1dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
    1dc8:	2300      	movs	r3, #0
    1dca:	74bb      	strb	r3, [r7, #18]
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	f000 809e 	beq.w	1f16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    FlagStatus       pwrclkchanged = RESET;
    1dda:	2300      	movs	r3, #0
    1ddc:	747b      	strb	r3, [r7, #17]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
    1dde:	4b46      	ldr	r3, [pc, #280]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    1de6:	2b00      	cmp	r3, #0
    1de8:	d101      	bne.n	1dee <HAL_RCCEx_PeriphCLKConfig+0x32>
    1dea:	2301      	movs	r3, #1
    1dec:	e000      	b.n	1df0 <HAL_RCCEx_PeriphCLKConfig+0x34>
    1dee:	2300      	movs	r3, #0
    1df0:	2b00      	cmp	r3, #0
    1df2:	d00d      	beq.n	1e10 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PWR_CLK_ENABLE();
    1df4:	4b40      	ldr	r3, [pc, #256]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1df8:	4a3f      	ldr	r2, [pc, #252]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1dfe:	6593      	str	r3, [r2, #88]	; 0x58
    1e00:	4b3d      	ldr	r3, [pc, #244]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    1e08:	60bb      	str	r3, [r7, #8]
    1e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
    1e0c:	2301      	movs	r3, #1
    1e0e:	747b      	strb	r3, [r7, #17]
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
    1e10:	4b3a      	ldr	r3, [pc, #232]	; (1efc <HAL_RCCEx_PeriphCLKConfig+0x140>)
    1e12:	681b      	ldr	r3, [r3, #0]
    1e14:	4a39      	ldr	r2, [pc, #228]	; (1efc <HAL_RCCEx_PeriphCLKConfig+0x140>)
    1e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1e1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
    1e1c:	f7fe fe12 	bl	a44 <HAL_GetTick>
    1e20:	60f8      	str	r0, [r7, #12]
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
    1e22:	e009      	b.n	1e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    1e24:	f7fe fe0e 	bl	a44 <HAL_GetTick>
    1e28:	4602      	mov	r2, r0
    1e2a:	68fb      	ldr	r3, [r7, #12]
    1e2c:	1ad3      	subs	r3, r2, r3
    1e2e:	2b02      	cmp	r3, #2
    1e30:	d902      	bls.n	1e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        ret = HAL_TIMEOUT;
    1e32:	2303      	movs	r3, #3
    1e34:	74fb      	strb	r3, [r7, #19]
        break;
    1e36:	e005      	b.n	1e44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
    1e38:	4b30      	ldr	r3, [pc, #192]	; (1efc <HAL_RCCEx_PeriphCLKConfig+0x140>)
    1e3a:	681b      	ldr	r3, [r3, #0]
    1e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1e40:	2b00      	cmp	r3, #0
    1e42:	d0ef      	beq.n	1e24 <HAL_RCCEx_PeriphCLKConfig+0x68>
    if(ret == HAL_OK)
    1e44:	7cfb      	ldrb	r3, [r7, #19]
    1e46:	2b00      	cmp	r3, #0
    1e48:	d15a      	bne.n	1f00 <HAL_RCCEx_PeriphCLKConfig+0x144>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
    1e4a:	4b2b      	ldr	r3, [pc, #172]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
    1e54:	617b      	str	r3, [r7, #20]
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
    1e56:	697b      	ldr	r3, [r7, #20]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d01e      	beq.n	1e9a <HAL_RCCEx_PeriphCLKConfig+0xde>
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1e60:	697a      	ldr	r2, [r7, #20]
    1e62:	429a      	cmp	r2, r3
    1e64:	d019      	beq.n	1e9a <HAL_RCCEx_PeriphCLKConfig+0xde>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
    1e66:	4b24      	ldr	r3, [pc, #144]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    1e70:	617b      	str	r3, [r7, #20]
        __HAL_RCC_BACKUPRESET_FORCE();
    1e72:	4b21      	ldr	r3, [pc, #132]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1e78:	4a1f      	ldr	r2, [pc, #124]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
    1e82:	4b1d      	ldr	r3, [pc, #116]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1e88:	4a1b      	ldr	r2, [pc, #108]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
    1e92:	4a19      	ldr	r2, [pc, #100]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1e94:	697b      	ldr	r3, [r7, #20]
    1e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
    1e9a:	697b      	ldr	r3, [r7, #20]
    1e9c:	f003 0301 	and.w	r3, r3, #1
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d016      	beq.n	1ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        tickstart = HAL_GetTick();
    1ea4:	f7fe fdce 	bl	a44 <HAL_GetTick>
    1ea8:	60f8      	str	r0, [r7, #12]
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
    1eaa:	e00b      	b.n	1ec4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    1eac:	f7fe fdca 	bl	a44 <HAL_GetTick>
    1eb0:	4602      	mov	r2, r0
    1eb2:	68fb      	ldr	r3, [r7, #12]
    1eb4:	1ad3      	subs	r3, r2, r3
    1eb6:	f241 3288 	movw	r2, #5000	; 0x1388
    1eba:	4293      	cmp	r3, r2
    1ebc:	d902      	bls.n	1ec4 <HAL_RCCEx_PeriphCLKConfig+0x108>
            ret = HAL_TIMEOUT;
    1ebe:	2303      	movs	r3, #3
    1ec0:	74fb      	strb	r3, [r7, #19]
            break;
    1ec2:	e006      	b.n	1ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
    1ec4:	4b0c      	ldr	r3, [pc, #48]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1eca:	f003 0302 	and.w	r3, r3, #2
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d0ec      	beq.n	1eac <HAL_RCCEx_PeriphCLKConfig+0xf0>
      if(ret == HAL_OK)
    1ed2:	7cfb      	ldrb	r3, [r7, #19]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d10b      	bne.n	1ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    1ed8:	4b07      	ldr	r3, [pc, #28]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ee6:	4904      	ldr	r1, [pc, #16]	; (1ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    1ee8:	4313      	orrs	r3, r2
    1eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    1eee:	e009      	b.n	1f04 <HAL_RCCEx_PeriphCLKConfig+0x148>
        status = ret;
    1ef0:	7cfb      	ldrb	r3, [r7, #19]
    1ef2:	74bb      	strb	r3, [r7, #18]
    1ef4:	e006      	b.n	1f04 <HAL_RCCEx_PeriphCLKConfig+0x148>
    1ef6:	bf00      	nop
    1ef8:	40021000 	.word	0x40021000
    1efc:	40007000 	.word	0x40007000
      status = ret;
    1f00:	7cfb      	ldrb	r3, [r7, #19]
    1f02:	74bb      	strb	r3, [r7, #18]
    if(pwrclkchanged == SET)
    1f04:	7c7b      	ldrb	r3, [r7, #17]
    1f06:	2b01      	cmp	r3, #1
    1f08:	d105      	bne.n	1f16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_PWR_CLK_DISABLE();
    1f0a:	4b6e      	ldr	r3, [pc, #440]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1f0e:	4a6d      	ldr	r2, [pc, #436]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    1f14:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
    1f16:	687b      	ldr	r3, [r7, #4]
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	f003 0301 	and.w	r3, r3, #1
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d00a      	beq.n	1f38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
    1f22:	4b68      	ldr	r3, [pc, #416]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1f28:	f023 0203 	bic.w	r2, r3, #3
    1f2c:	687b      	ldr	r3, [r7, #4]
    1f2e:	685b      	ldr	r3, [r3, #4]
    1f30:	4964      	ldr	r1, [pc, #400]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f32:	4313      	orrs	r3, r2
    1f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	f003 0302 	and.w	r3, r3, #2
    1f40:	2b00      	cmp	r3, #0
    1f42:	d00a      	beq.n	1f5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
    1f44:	4b5f      	ldr	r3, [pc, #380]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1f4a:	f023 020c 	bic.w	r2, r3, #12
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	689b      	ldr	r3, [r3, #8]
    1f52:	495c      	ldr	r1, [pc, #368]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f54:	4313      	orrs	r3, r2
    1f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	681b      	ldr	r3, [r3, #0]
    1f5e:	f003 0304 	and.w	r3, r3, #4
    1f62:	2b00      	cmp	r3, #0
    1f64:	d00a      	beq.n	1f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
    1f66:	4b57      	ldr	r3, [pc, #348]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1f6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	68db      	ldr	r3, [r3, #12]
    1f74:	4953      	ldr	r1, [pc, #332]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f76:	4313      	orrs	r3, r2
    1f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	f003 0320 	and.w	r3, r3, #32
    1f84:	2b00      	cmp	r3, #0
    1f86:	d00a      	beq.n	1f9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
    1f88:	4b4e      	ldr	r3, [pc, #312]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1f8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
    1f92:	687b      	ldr	r3, [r7, #4]
    1f94:	691b      	ldr	r3, [r3, #16]
    1f96:	494b      	ldr	r1, [pc, #300]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1f98:	4313      	orrs	r3, r2
    1f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d00a      	beq.n	1fc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
    1faa:	4b46      	ldr	r3, [pc, #280]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1fb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
    1fb4:	687b      	ldr	r3, [r7, #4]
    1fb6:	6a1b      	ldr	r3, [r3, #32]
    1fb8:	4942      	ldr	r1, [pc, #264]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1fba:	4313      	orrs	r3, r2
    1fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	681b      	ldr	r3, [r3, #0]
    1fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d00a      	beq.n	1fe2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
    1fcc:	4b3d      	ldr	r3, [pc, #244]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    1fd6:	687b      	ldr	r3, [r7, #4]
    1fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1fda:	493a      	ldr	r1, [pc, #232]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1fdc:	4313      	orrs	r3, r2
    1fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1fea:	2b00      	cmp	r3, #0
    1fec:	d00a      	beq.n	2004 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
    1fee:	4b35      	ldr	r3, [pc, #212]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1ff4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	695b      	ldr	r3, [r3, #20]
    1ffc:	4931      	ldr	r1, [pc, #196]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    1ffe:	4313      	orrs	r3, r2
    2000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	f003 0380 	and.w	r3, r3, #128	; 0x80
    200c:	2b00      	cmp	r3, #0
    200e:	d00a      	beq.n	2026 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
    2010:	4b2c      	ldr	r3, [pc, #176]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    2012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    2016:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	699b      	ldr	r3, [r3, #24]
    201e:	4929      	ldr	r1, [pc, #164]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    2020:	4313      	orrs	r3, r2
    2022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    202e:	2b00      	cmp	r3, #0
    2030:	d00a      	beq.n	2048 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
    2032:	4b24      	ldr	r3, [pc, #144]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    2034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    2038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
    203c:	687b      	ldr	r3, [r7, #4]
    203e:	69db      	ldr	r3, [r3, #28]
    2040:	4920      	ldr	r1, [pc, #128]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    2042:	4313      	orrs	r3, r2
    2044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	681b      	ldr	r3, [r3, #0]
    204c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    2050:	2b00      	cmp	r3, #0
    2052:	d015      	beq.n	2080 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
    2054:	4b1b      	ldr	r3, [pc, #108]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    2056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    205a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2062:	4918      	ldr	r1, [pc, #96]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    2064:	4313      	orrs	r3, r2
    2066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    206e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    2072:	d105      	bne.n	2080 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    2074:	4b13      	ldr	r3, [pc, #76]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    2076:	68db      	ldr	r3, [r3, #12]
    2078:	4a12      	ldr	r2, [pc, #72]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    207a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    207e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
    2080:	687b      	ldr	r3, [r7, #4]
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2088:	2b00      	cmp	r3, #0
    208a:	d015      	beq.n	20b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
    208c:	4b0d      	ldr	r3, [pc, #52]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    2092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    209a:	490a      	ldr	r1, [pc, #40]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    209c:	4313      	orrs	r3, r2
    209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
    20a2:	687b      	ldr	r3, [r7, #4]
    20a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    20a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
    20aa:	d105      	bne.n	20b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    20ac:	4b05      	ldr	r3, [pc, #20]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    20ae:	68db      	ldr	r3, [r3, #12]
    20b0:	4a04      	ldr	r2, [pc, #16]	; (20c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
    20b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    20b6:	60d3      	str	r3, [r2, #12]
  return status;
    20b8:	7cbb      	ldrb	r3, [r7, #18]
}
    20ba:	4618      	mov	r0, r3
    20bc:	3718      	adds	r7, #24
    20be:	46bd      	mov	sp, r7
    20c0:	bd80      	pop	{r7, pc}
    20c2:	bf00      	nop
    20c4:	40021000 	.word	0x40021000

000020c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
    20c8:	b480      	push	{r7}
    20ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
    20cc:	4b05      	ldr	r3, [pc, #20]	; (20e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	4a04      	ldr	r2, [pc, #16]	; (20e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
    20d2:	f043 0304 	orr.w	r3, r3, #4
    20d6:	6013      	str	r3, [r2, #0]
}
    20d8:	bf00      	nop
    20da:	46bd      	mov	sp, r7
    20dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    20e0:	4770      	bx	lr
    20e2:	bf00      	nop
    20e4:	40021000 	.word	0x40021000

000020e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
    20e8:	b580      	push	{r7, lr}
    20ea:	b082      	sub	sp, #8
    20ec:	af00      	add	r7, sp, #0
    20ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
    20f0:	687b      	ldr	r3, [r7, #4]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d101      	bne.n	20fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
    20f6:	2301      	movs	r3, #1
    20f8:	e049      	b.n	218e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    2100:	b2db      	uxtb	r3, r3
    2102:	2b00      	cmp	r3, #0
    2104:	d106      	bne.n	2114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
    2106:	687b      	ldr	r3, [r7, #4]
    2108:	2200      	movs	r2, #0
    210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
    210e:	6878      	ldr	r0, [r7, #4]
    2110:	f7fe fb46 	bl	7a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	2202      	movs	r2, #2
    2118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	681a      	ldr	r2, [r3, #0]
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	3304      	adds	r3, #4
    2124:	4619      	mov	r1, r3
    2126:	4610      	mov	r0, r2
    2128:	f000 f9b4 	bl	2494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	2201      	movs	r2, #1
    2130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	2201      	movs	r2, #1
    2138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	2201      	movs	r2, #1
    2140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	2201      	movs	r2, #1
    2148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	2201      	movs	r2, #1
    2150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	2201      	movs	r2, #1
    2158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	2201      	movs	r2, #1
    2160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	2201      	movs	r2, #1
    2168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	2201      	movs	r2, #1
    2170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2174:	687b      	ldr	r3, [r7, #4]
    2176:	2201      	movs	r2, #1
    2178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	2201      	movs	r2, #1
    2180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	2201      	movs	r2, #1
    2188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
    218c:	2300      	movs	r3, #0
}
    218e:	4618      	mov	r0, r3
    2190:	3708      	adds	r7, #8
    2192:	46bd      	mov	sp, r7
    2194:	bd80      	pop	{r7, pc}
	...

00002198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
    2198:	b480      	push	{r7}
    219a:	b085      	sub	sp, #20
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    21a6:	b2db      	uxtb	r3, r3
    21a8:	2b01      	cmp	r3, #1
    21aa:	d001      	beq.n	21b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
    21ac:	2301      	movs	r3, #1
    21ae:	e03b      	b.n	2228 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	2202      	movs	r2, #2
    21b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	68da      	ldr	r2, [r3, #12]
    21be:	687b      	ldr	r3, [r7, #4]
    21c0:	681b      	ldr	r3, [r3, #0]
    21c2:	f042 0201 	orr.w	r2, r2, #1
    21c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	4a19      	ldr	r2, [pc, #100]	; (2234 <HAL_TIM_Base_Start_IT+0x9c>)
    21ce:	4293      	cmp	r3, r2
    21d0:	d009      	beq.n	21e6 <HAL_TIM_Base_Start_IT+0x4e>
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	681b      	ldr	r3, [r3, #0]
    21d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    21da:	d004      	beq.n	21e6 <HAL_TIM_Base_Start_IT+0x4e>
    21dc:	687b      	ldr	r3, [r7, #4]
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	4a15      	ldr	r2, [pc, #84]	; (2238 <HAL_TIM_Base_Start_IT+0xa0>)
    21e2:	4293      	cmp	r3, r2
    21e4:	d115      	bne.n	2212 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	681b      	ldr	r3, [r3, #0]
    21ea:	689a      	ldr	r2, [r3, #8]
    21ec:	4b13      	ldr	r3, [pc, #76]	; (223c <HAL_TIM_Base_Start_IT+0xa4>)
    21ee:	4013      	ands	r3, r2
    21f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    21f2:	68fb      	ldr	r3, [r7, #12]
    21f4:	2b06      	cmp	r3, #6
    21f6:	d015      	beq.n	2224 <HAL_TIM_Base_Start_IT+0x8c>
    21f8:	68fb      	ldr	r3, [r7, #12]
    21fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    21fe:	d011      	beq.n	2224 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
    2200:	687b      	ldr	r3, [r7, #4]
    2202:	681b      	ldr	r3, [r3, #0]
    2204:	681a      	ldr	r2, [r3, #0]
    2206:	687b      	ldr	r3, [r7, #4]
    2208:	681b      	ldr	r3, [r3, #0]
    220a:	f042 0201 	orr.w	r2, r2, #1
    220e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    2210:	e008      	b.n	2224 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	681a      	ldr	r2, [r3, #0]
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	f042 0201 	orr.w	r2, r2, #1
    2220:	601a      	str	r2, [r3, #0]
    2222:	e000      	b.n	2226 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    2224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
    2226:	2300      	movs	r3, #0
}
    2228:	4618      	mov	r0, r3
    222a:	3714      	adds	r7, #20
    222c:	46bd      	mov	sp, r7
    222e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2232:	4770      	bx	lr
    2234:	40012c00 	.word	0x40012c00
    2238:	40014000 	.word	0x40014000
    223c:	00010007 	.word	0x00010007

00002240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
    2240:	b580      	push	{r7, lr}
    2242:	b084      	sub	sp, #16
    2244:	af00      	add	r7, sp, #0
    2246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	681b      	ldr	r3, [r3, #0]
    224c:	68db      	ldr	r3, [r3, #12]
    224e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	691b      	ldr	r3, [r3, #16]
    2256:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
    2258:	68bb      	ldr	r3, [r7, #8]
    225a:	f003 0302 	and.w	r3, r3, #2
    225e:	2b00      	cmp	r3, #0
    2260:	d020      	beq.n	22a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
    2262:	68fb      	ldr	r3, [r7, #12]
    2264:	f003 0302 	and.w	r3, r3, #2
    2268:	2b00      	cmp	r3, #0
    226a:	d01b      	beq.n	22a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	681b      	ldr	r3, [r3, #0]
    2270:	f06f 0202 	mvn.w	r2, #2
    2274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	2201      	movs	r2, #1
    227a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	699b      	ldr	r3, [r3, #24]
    2282:	f003 0303 	and.w	r3, r3, #3
    2286:	2b00      	cmp	r3, #0
    2288:	d003      	beq.n	2292 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
    228a:	6878      	ldr	r0, [r7, #4]
    228c:	f000 f8e4 	bl	2458 <HAL_TIM_IC_CaptureCallback>
    2290:	e005      	b.n	229e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
    2292:	6878      	ldr	r0, [r7, #4]
    2294:	f000 f8d6 	bl	2444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
    2298:	6878      	ldr	r0, [r7, #4]
    229a:	f000 f8e7 	bl	246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2200      	movs	r2, #0
    22a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
    22a4:	68bb      	ldr	r3, [r7, #8]
    22a6:	f003 0304 	and.w	r3, r3, #4
    22aa:	2b00      	cmp	r3, #0
    22ac:	d020      	beq.n	22f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
    22ae:	68fb      	ldr	r3, [r7, #12]
    22b0:	f003 0304 	and.w	r3, r3, #4
    22b4:	2b00      	cmp	r3, #0
    22b6:	d01b      	beq.n	22f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	f06f 0204 	mvn.w	r2, #4
    22c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
    22c2:	687b      	ldr	r3, [r7, #4]
    22c4:	2202      	movs	r2, #2
    22c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	699b      	ldr	r3, [r3, #24]
    22ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
    22d2:	2b00      	cmp	r3, #0
    22d4:	d003      	beq.n	22de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
    22d6:	6878      	ldr	r0, [r7, #4]
    22d8:	f000 f8be 	bl	2458 <HAL_TIM_IC_CaptureCallback>
    22dc:	e005      	b.n	22ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
    22de:	6878      	ldr	r0, [r7, #4]
    22e0:	f000 f8b0 	bl	2444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
    22e4:	6878      	ldr	r0, [r7, #4]
    22e6:	f000 f8c1 	bl	246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	2200      	movs	r2, #0
    22ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
    22f0:	68bb      	ldr	r3, [r7, #8]
    22f2:	f003 0308 	and.w	r3, r3, #8
    22f6:	2b00      	cmp	r3, #0
    22f8:	d020      	beq.n	233c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
    22fa:	68fb      	ldr	r3, [r7, #12]
    22fc:	f003 0308 	and.w	r3, r3, #8
    2300:	2b00      	cmp	r3, #0
    2302:	d01b      	beq.n	233c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	681b      	ldr	r3, [r3, #0]
    2308:	f06f 0208 	mvn.w	r2, #8
    230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	2204      	movs	r2, #4
    2312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	681b      	ldr	r3, [r3, #0]
    2318:	69db      	ldr	r3, [r3, #28]
    231a:	f003 0303 	and.w	r3, r3, #3
    231e:	2b00      	cmp	r3, #0
    2320:	d003      	beq.n	232a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
    2322:	6878      	ldr	r0, [r7, #4]
    2324:	f000 f898 	bl	2458 <HAL_TIM_IC_CaptureCallback>
    2328:	e005      	b.n	2336 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
    232a:	6878      	ldr	r0, [r7, #4]
    232c:	f000 f88a 	bl	2444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
    2330:	6878      	ldr	r0, [r7, #4]
    2332:	f000 f89b 	bl	246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	2200      	movs	r2, #0
    233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
    233c:	68bb      	ldr	r3, [r7, #8]
    233e:	f003 0310 	and.w	r3, r3, #16
    2342:	2b00      	cmp	r3, #0
    2344:	d020      	beq.n	2388 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
    2346:	68fb      	ldr	r3, [r7, #12]
    2348:	f003 0310 	and.w	r3, r3, #16
    234c:	2b00      	cmp	r3, #0
    234e:	d01b      	beq.n	2388 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
    2350:	687b      	ldr	r3, [r7, #4]
    2352:	681b      	ldr	r3, [r3, #0]
    2354:	f06f 0210 	mvn.w	r2, #16
    2358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	2208      	movs	r2, #8
    235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	69db      	ldr	r3, [r3, #28]
    2366:	f403 7340 	and.w	r3, r3, #768	; 0x300
    236a:	2b00      	cmp	r3, #0
    236c:	d003      	beq.n	2376 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
    236e:	6878      	ldr	r0, [r7, #4]
    2370:	f000 f872 	bl	2458 <HAL_TIM_IC_CaptureCallback>
    2374:	e005      	b.n	2382 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
    2376:	6878      	ldr	r0, [r7, #4]
    2378:	f000 f864 	bl	2444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
    237c:	6878      	ldr	r0, [r7, #4]
    237e:	f000 f875 	bl	246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	2200      	movs	r2, #0
    2386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
    2388:	68bb      	ldr	r3, [r7, #8]
    238a:	f003 0301 	and.w	r3, r3, #1
    238e:	2b00      	cmp	r3, #0
    2390:	d00c      	beq.n	23ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
    2392:	68fb      	ldr	r3, [r7, #12]
    2394:	f003 0301 	and.w	r3, r3, #1
    2398:	2b00      	cmp	r3, #0
    239a:	d007      	beq.n	23ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	f06f 0201 	mvn.w	r2, #1
    23a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
    23a6:	6878      	ldr	r0, [r7, #4]
    23a8:	f7fe f940 	bl	62c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
    23ac:	68bb      	ldr	r3, [r7, #8]
    23ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    23b2:	2b00      	cmp	r3, #0
    23b4:	d00c      	beq.n	23d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
    23b6:	68fb      	ldr	r3, [r7, #12]
    23b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    23bc:	2b00      	cmp	r3, #0
    23be:	d007      	beq.n	23d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
    23c0:	687b      	ldr	r3, [r7, #4]
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
    23c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
    23ca:	6878      	ldr	r0, [r7, #4]
    23cc:	f000 f936 	bl	263c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
    23d0:	68bb      	ldr	r3, [r7, #8]
    23d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    23d6:	2b00      	cmp	r3, #0
    23d8:	d00c      	beq.n	23f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
    23da:	68fb      	ldr	r3, [r7, #12]
    23dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    23e0:	2b00      	cmp	r3, #0
    23e2:	d007      	beq.n	23f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	681b      	ldr	r3, [r3, #0]
    23e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
    23ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
    23ee:	6878      	ldr	r0, [r7, #4]
    23f0:	f000 f92e 	bl	2650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
    23f4:	68bb      	ldr	r3, [r7, #8]
    23f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    23fa:	2b00      	cmp	r3, #0
    23fc:	d00c      	beq.n	2418 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
    23fe:	68fb      	ldr	r3, [r7, #12]
    2400:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2404:	2b00      	cmp	r3, #0
    2406:	d007      	beq.n	2418 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	681b      	ldr	r3, [r3, #0]
    240c:	f06f 0240 	mvn.w	r2, #64	; 0x40
    2410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
    2412:	6878      	ldr	r0, [r7, #4]
    2414:	f000 f834 	bl	2480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
    2418:	68bb      	ldr	r3, [r7, #8]
    241a:	f003 0320 	and.w	r3, r3, #32
    241e:	2b00      	cmp	r3, #0
    2420:	d00c      	beq.n	243c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	f003 0320 	and.w	r3, r3, #32
    2428:	2b00      	cmp	r3, #0
    242a:	d007      	beq.n	243c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	681b      	ldr	r3, [r3, #0]
    2430:	f06f 0220 	mvn.w	r2, #32
    2434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
    2436:	6878      	ldr	r0, [r7, #4]
    2438:	f000 f8f6 	bl	2628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
    243c:	bf00      	nop
    243e:	3710      	adds	r7, #16
    2440:	46bd      	mov	sp, r7
    2442:	bd80      	pop	{r7, pc}

00002444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
    2444:	b480      	push	{r7}
    2446:	b083      	sub	sp, #12
    2448:	af00      	add	r7, sp, #0
    244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
    244c:	bf00      	nop
    244e:	370c      	adds	r7, #12
    2450:	46bd      	mov	sp, r7
    2452:	f85d 7b04 	ldr.w	r7, [sp], #4
    2456:	4770      	bx	lr

00002458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
    2458:	b480      	push	{r7}
    245a:	b083      	sub	sp, #12
    245c:	af00      	add	r7, sp, #0
    245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
    2460:	bf00      	nop
    2462:	370c      	adds	r7, #12
    2464:	46bd      	mov	sp, r7
    2466:	f85d 7b04 	ldr.w	r7, [sp], #4
    246a:	4770      	bx	lr

0000246c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
    246c:	b480      	push	{r7}
    246e:	b083      	sub	sp, #12
    2470:	af00      	add	r7, sp, #0
    2472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
    2474:	bf00      	nop
    2476:	370c      	adds	r7, #12
    2478:	46bd      	mov	sp, r7
    247a:	f85d 7b04 	ldr.w	r7, [sp], #4
    247e:	4770      	bx	lr

00002480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
    2480:	b480      	push	{r7}
    2482:	b083      	sub	sp, #12
    2484:	af00      	add	r7, sp, #0
    2486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
    2488:	bf00      	nop
    248a:	370c      	adds	r7, #12
    248c:	46bd      	mov	sp, r7
    248e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2492:	4770      	bx	lr

00002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
    2494:	b480      	push	{r7}
    2496:	b085      	sub	sp, #20
    2498:	af00      	add	r7, sp, #0
    249a:	6078      	str	r0, [r7, #4]
    249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	681b      	ldr	r3, [r3, #0]
    24a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	4a2a      	ldr	r2, [pc, #168]	; (2550 <TIM_Base_SetConfig+0xbc>)
    24a8:	4293      	cmp	r3, r2
    24aa:	d003      	beq.n	24b4 <TIM_Base_SetConfig+0x20>
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    24b2:	d108      	bne.n	24c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    24b4:	68fb      	ldr	r3, [r7, #12]
    24b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    24ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
    24bc:	683b      	ldr	r3, [r7, #0]
    24be:	685b      	ldr	r3, [r3, #4]
    24c0:	68fa      	ldr	r2, [r7, #12]
    24c2:	4313      	orrs	r3, r2
    24c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
    24c6:	687b      	ldr	r3, [r7, #4]
    24c8:	4a21      	ldr	r2, [pc, #132]	; (2550 <TIM_Base_SetConfig+0xbc>)
    24ca:	4293      	cmp	r3, r2
    24cc:	d00b      	beq.n	24e6 <TIM_Base_SetConfig+0x52>
    24ce:	687b      	ldr	r3, [r7, #4]
    24d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    24d4:	d007      	beq.n	24e6 <TIM_Base_SetConfig+0x52>
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	4a1e      	ldr	r2, [pc, #120]	; (2554 <TIM_Base_SetConfig+0xc0>)
    24da:	4293      	cmp	r3, r2
    24dc:	d003      	beq.n	24e6 <TIM_Base_SetConfig+0x52>
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	4a1d      	ldr	r2, [pc, #116]	; (2558 <TIM_Base_SetConfig+0xc4>)
    24e2:	4293      	cmp	r3, r2
    24e4:	d108      	bne.n	24f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    24e6:	68fb      	ldr	r3, [r7, #12]
    24e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    24ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
    24ee:	683b      	ldr	r3, [r7, #0]
    24f0:	68db      	ldr	r3, [r3, #12]
    24f2:	68fa      	ldr	r2, [r7, #12]
    24f4:	4313      	orrs	r3, r2
    24f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
    24f8:	68fb      	ldr	r3, [r7, #12]
    24fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    24fe:	683b      	ldr	r3, [r7, #0]
    2500:	695b      	ldr	r3, [r3, #20]
    2502:	4313      	orrs	r3, r2
    2504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	68fa      	ldr	r2, [r7, #12]
    250a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
    250c:	683b      	ldr	r3, [r7, #0]
    250e:	689a      	ldr	r2, [r3, #8]
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
    2514:	683b      	ldr	r3, [r7, #0]
    2516:	681a      	ldr	r2, [r3, #0]
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	4a0c      	ldr	r2, [pc, #48]	; (2550 <TIM_Base_SetConfig+0xbc>)
    2520:	4293      	cmp	r3, r2
    2522:	d007      	beq.n	2534 <TIM_Base_SetConfig+0xa0>
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	4a0b      	ldr	r2, [pc, #44]	; (2554 <TIM_Base_SetConfig+0xc0>)
    2528:	4293      	cmp	r3, r2
    252a:	d003      	beq.n	2534 <TIM_Base_SetConfig+0xa0>
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	4a0a      	ldr	r2, [pc, #40]	; (2558 <TIM_Base_SetConfig+0xc4>)
    2530:	4293      	cmp	r3, r2
    2532:	d103      	bne.n	253c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
    2534:	683b      	ldr	r3, [r7, #0]
    2536:	691a      	ldr	r2, [r3, #16]
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	2201      	movs	r2, #1
    2540:	615a      	str	r2, [r3, #20]
}
    2542:	bf00      	nop
    2544:	3714      	adds	r7, #20
    2546:	46bd      	mov	sp, r7
    2548:	f85d 7b04 	ldr.w	r7, [sp], #4
    254c:	4770      	bx	lr
    254e:	bf00      	nop
    2550:	40012c00 	.word	0x40012c00
    2554:	40014000 	.word	0x40014000
    2558:	40014400 	.word	0x40014400

0000255c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
    255c:	b480      	push	{r7}
    255e:	b085      	sub	sp, #20
    2560:	af00      	add	r7, sp, #0
    2562:	6078      	str	r0, [r7, #4]
    2564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
    2566:	687b      	ldr	r3, [r7, #4]
    2568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    256c:	2b01      	cmp	r3, #1
    256e:	d101      	bne.n	2574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
    2570:	2302      	movs	r3, #2
    2572:	e04f      	b.n	2614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	2201      	movs	r2, #1
    2578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	2202      	movs	r2, #2
    2580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	681b      	ldr	r3, [r3, #0]
    2588:	685b      	ldr	r3, [r3, #4]
    258a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	681b      	ldr	r3, [r3, #0]
    2590:	689b      	ldr	r3, [r3, #8]
    2592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	4a21      	ldr	r2, [pc, #132]	; (2620 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
    259a:	4293      	cmp	r3, r2
    259c:	d108      	bne.n	25b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    259e:	68fb      	ldr	r3, [r7, #12]
    25a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    25a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
    25a6:	683b      	ldr	r3, [r7, #0]
    25a8:	685b      	ldr	r3, [r3, #4]
    25aa:	68fa      	ldr	r2, [r7, #12]
    25ac:	4313      	orrs	r3, r2
    25ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
    25b0:	68fb      	ldr	r3, [r7, #12]
    25b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    25b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
    25b8:	683b      	ldr	r3, [r7, #0]
    25ba:	681b      	ldr	r3, [r3, #0]
    25bc:	68fa      	ldr	r2, [r7, #12]
    25be:	4313      	orrs	r3, r2
    25c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	681b      	ldr	r3, [r3, #0]
    25c6:	68fa      	ldr	r2, [r7, #12]
    25c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	681b      	ldr	r3, [r3, #0]
    25ce:	4a14      	ldr	r2, [pc, #80]	; (2620 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
    25d0:	4293      	cmp	r3, r2
    25d2:	d009      	beq.n	25e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    25dc:	d004      	beq.n	25e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	4a10      	ldr	r2, [pc, #64]	; (2624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
    25e4:	4293      	cmp	r3, r2
    25e6:	d10c      	bne.n	2602 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    25e8:	68bb      	ldr	r3, [r7, #8]
    25ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    25ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
    25f0:	683b      	ldr	r3, [r7, #0]
    25f2:	689b      	ldr	r3, [r3, #8]
    25f4:	68ba      	ldr	r2, [r7, #8]
    25f6:	4313      	orrs	r3, r2
    25f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	681b      	ldr	r3, [r3, #0]
    25fe:	68ba      	ldr	r2, [r7, #8]
    2600:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	2201      	movs	r2, #1
    2606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	2200      	movs	r2, #0
    260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
    2612:	2300      	movs	r3, #0
}
    2614:	4618      	mov	r0, r3
    2616:	3714      	adds	r7, #20
    2618:	46bd      	mov	sp, r7
    261a:	f85d 7b04 	ldr.w	r7, [sp], #4
    261e:	4770      	bx	lr
    2620:	40012c00 	.word	0x40012c00
    2624:	40014000 	.word	0x40014000

00002628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
    2628:	b480      	push	{r7}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
    2630:	bf00      	nop
    2632:	370c      	adds	r7, #12
    2634:	46bd      	mov	sp, r7
    2636:	f85d 7b04 	ldr.w	r7, [sp], #4
    263a:	4770      	bx	lr

0000263c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
    263c:	b480      	push	{r7}
    263e:	b083      	sub	sp, #12
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
    2644:	bf00      	nop
    2646:	370c      	adds	r7, #12
    2648:	46bd      	mov	sp, r7
    264a:	f85d 7b04 	ldr.w	r7, [sp], #4
    264e:	4770      	bx	lr

00002650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
    2650:	b480      	push	{r7}
    2652:	b083      	sub	sp, #12
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
    2658:	bf00      	nop
    265a:	370c      	adds	r7, #12
    265c:	46bd      	mov	sp, r7
    265e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2662:	4770      	bx	lr

00002664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
    2664:	b580      	push	{r7, lr}
    2666:	b082      	sub	sp, #8
    2668:	af00      	add	r7, sp, #0
    266a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	2b00      	cmp	r3, #0
    2670:	d101      	bne.n	2676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
    2672:	2301      	movs	r3, #1
    2674:	e040      	b.n	26f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
    2676:	687b      	ldr	r3, [r7, #4]
    2678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    267a:	2b00      	cmp	r3, #0
    267c:	d106      	bne.n	268c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
    267e:	687b      	ldr	r3, [r7, #4]
    2680:	2200      	movs	r2, #0
    2682:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
    2686:	6878      	ldr	r0, [r7, #4]
    2688:	f7fe f8e0 	bl	84c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	2224      	movs	r2, #36	; 0x24
    2690:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	681b      	ldr	r3, [r3, #0]
    2696:	681a      	ldr	r2, [r3, #0]
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	f022 0201 	bic.w	r2, r2, #1
    26a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
    26a2:	687b      	ldr	r3, [r7, #4]
    26a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    26a6:	2b00      	cmp	r3, #0
    26a8:	d002      	beq.n	26b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
    26aa:	6878      	ldr	r0, [r7, #4]
    26ac:	f000 fa82 	bl	2bb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
    26b0:	6878      	ldr	r0, [r7, #4]
    26b2:	f000 f825 	bl	2700 <UART_SetConfig>
    26b6:	4603      	mov	r3, r0
    26b8:	2b01      	cmp	r3, #1
    26ba:	d101      	bne.n	26c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
    26bc:	2301      	movs	r3, #1
    26be:	e01b      	b.n	26f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	681b      	ldr	r3, [r3, #0]
    26c4:	685a      	ldr	r2, [r3, #4]
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	681b      	ldr	r3, [r3, #0]
    26ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    26ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	689a      	ldr	r2, [r3, #8]
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	681b      	ldr	r3, [r3, #0]
    26da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
    26de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	681b      	ldr	r3, [r3, #0]
    26e4:	681a      	ldr	r2, [r3, #0]
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	f042 0201 	orr.w	r2, r2, #1
    26ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
    26f0:	6878      	ldr	r0, [r7, #4]
    26f2:	f000 fb01 	bl	2cf8 <UART_CheckIdleState>
    26f6:	4603      	mov	r3, r0
}
    26f8:	4618      	mov	r0, r3
    26fa:	3708      	adds	r7, #8
    26fc:	46bd      	mov	sp, r7
    26fe:	bd80      	pop	{r7, pc}

00002700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
    2700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    2704:	b08a      	sub	sp, #40	; 0x28
    2706:	af00      	add	r7, sp, #0
    2708:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
    270a:	2300      	movs	r3, #0
    270c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
    2710:	68fb      	ldr	r3, [r7, #12]
    2712:	689a      	ldr	r2, [r3, #8]
    2714:	68fb      	ldr	r3, [r7, #12]
    2716:	691b      	ldr	r3, [r3, #16]
    2718:	431a      	orrs	r2, r3
    271a:	68fb      	ldr	r3, [r7, #12]
    271c:	695b      	ldr	r3, [r3, #20]
    271e:	431a      	orrs	r2, r3
    2720:	68fb      	ldr	r3, [r7, #12]
    2722:	69db      	ldr	r3, [r3, #28]
    2724:	4313      	orrs	r3, r2
    2726:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	681a      	ldr	r2, [r3, #0]
    272e:	4b9e      	ldr	r3, [pc, #632]	; (29a8 <UART_SetConfig+0x2a8>)
    2730:	4013      	ands	r3, r2
    2732:	68fa      	ldr	r2, [r7, #12]
    2734:	6812      	ldr	r2, [r2, #0]
    2736:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2738:	430b      	orrs	r3, r1
    273a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
    273c:	68fb      	ldr	r3, [r7, #12]
    273e:	681b      	ldr	r3, [r3, #0]
    2740:	685b      	ldr	r3, [r3, #4]
    2742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
    2746:	68fb      	ldr	r3, [r7, #12]
    2748:	68da      	ldr	r2, [r3, #12]
    274a:	68fb      	ldr	r3, [r7, #12]
    274c:	681b      	ldr	r3, [r3, #0]
    274e:	430a      	orrs	r2, r1
    2750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
    2752:	68fb      	ldr	r3, [r7, #12]
    2754:	699b      	ldr	r3, [r3, #24]
    2756:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
    2758:	68fb      	ldr	r3, [r7, #12]
    275a:	681b      	ldr	r3, [r3, #0]
    275c:	4a93      	ldr	r2, [pc, #588]	; (29ac <UART_SetConfig+0x2ac>)
    275e:	4293      	cmp	r3, r2
    2760:	d004      	beq.n	276c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
    2762:	68fb      	ldr	r3, [r7, #12]
    2764:	6a1b      	ldr	r3, [r3, #32]
    2766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2768:	4313      	orrs	r3, r2
    276a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
    276c:	68fb      	ldr	r3, [r7, #12]
    276e:	681b      	ldr	r3, [r3, #0]
    2770:	689b      	ldr	r3, [r3, #8]
    2772:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
    2776:	68fb      	ldr	r3, [r7, #12]
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    277c:	430a      	orrs	r2, r1
    277e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
    2780:	68fb      	ldr	r3, [r7, #12]
    2782:	681b      	ldr	r3, [r3, #0]
    2784:	4a8a      	ldr	r2, [pc, #552]	; (29b0 <UART_SetConfig+0x2b0>)
    2786:	4293      	cmp	r3, r2
    2788:	d126      	bne.n	27d8 <UART_SetConfig+0xd8>
    278a:	4b8a      	ldr	r3, [pc, #552]	; (29b4 <UART_SetConfig+0x2b4>)
    278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    2790:	f003 0303 	and.w	r3, r3, #3
    2794:	2b03      	cmp	r3, #3
    2796:	d81b      	bhi.n	27d0 <UART_SetConfig+0xd0>
    2798:	a201      	add	r2, pc, #4	; (adr r2, 27a0 <UART_SetConfig+0xa0>)
    279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    279e:	bf00      	nop
    27a0:	000027b1 	.word	0x000027b1
    27a4:	000027c1 	.word	0x000027c1
    27a8:	000027b9 	.word	0x000027b9
    27ac:	000027c9 	.word	0x000027c9
    27b0:	2301      	movs	r3, #1
    27b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    27b6:	e0ab      	b.n	2910 <UART_SetConfig+0x210>
    27b8:	2302      	movs	r3, #2
    27ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    27be:	e0a7      	b.n	2910 <UART_SetConfig+0x210>
    27c0:	2304      	movs	r3, #4
    27c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    27c6:	e0a3      	b.n	2910 <UART_SetConfig+0x210>
    27c8:	2308      	movs	r3, #8
    27ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    27ce:	e09f      	b.n	2910 <UART_SetConfig+0x210>
    27d0:	2310      	movs	r3, #16
    27d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    27d6:	e09b      	b.n	2910 <UART_SetConfig+0x210>
    27d8:	68fb      	ldr	r3, [r7, #12]
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	4a76      	ldr	r2, [pc, #472]	; (29b8 <UART_SetConfig+0x2b8>)
    27de:	4293      	cmp	r3, r2
    27e0:	d138      	bne.n	2854 <UART_SetConfig+0x154>
    27e2:	4b74      	ldr	r3, [pc, #464]	; (29b4 <UART_SetConfig+0x2b4>)
    27e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    27e8:	f003 030c 	and.w	r3, r3, #12
    27ec:	2b0c      	cmp	r3, #12
    27ee:	d82d      	bhi.n	284c <UART_SetConfig+0x14c>
    27f0:	a201      	add	r2, pc, #4	; (adr r2, 27f8 <UART_SetConfig+0xf8>)
    27f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    27f6:	bf00      	nop
    27f8:	0000282d 	.word	0x0000282d
    27fc:	0000284d 	.word	0x0000284d
    2800:	0000284d 	.word	0x0000284d
    2804:	0000284d 	.word	0x0000284d
    2808:	0000283d 	.word	0x0000283d
    280c:	0000284d 	.word	0x0000284d
    2810:	0000284d 	.word	0x0000284d
    2814:	0000284d 	.word	0x0000284d
    2818:	00002835 	.word	0x00002835
    281c:	0000284d 	.word	0x0000284d
    2820:	0000284d 	.word	0x0000284d
    2824:	0000284d 	.word	0x0000284d
    2828:	00002845 	.word	0x00002845
    282c:	2300      	movs	r3, #0
    282e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2832:	e06d      	b.n	2910 <UART_SetConfig+0x210>
    2834:	2302      	movs	r3, #2
    2836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    283a:	e069      	b.n	2910 <UART_SetConfig+0x210>
    283c:	2304      	movs	r3, #4
    283e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2842:	e065      	b.n	2910 <UART_SetConfig+0x210>
    2844:	2308      	movs	r3, #8
    2846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    284a:	e061      	b.n	2910 <UART_SetConfig+0x210>
    284c:	2310      	movs	r3, #16
    284e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2852:	e05d      	b.n	2910 <UART_SetConfig+0x210>
    2854:	68fb      	ldr	r3, [r7, #12]
    2856:	681b      	ldr	r3, [r3, #0]
    2858:	4a58      	ldr	r2, [pc, #352]	; (29bc <UART_SetConfig+0x2bc>)
    285a:	4293      	cmp	r3, r2
    285c:	d125      	bne.n	28aa <UART_SetConfig+0x1aa>
    285e:	4b55      	ldr	r3, [pc, #340]	; (29b4 <UART_SetConfig+0x2b4>)
    2860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    2864:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2868:	2b30      	cmp	r3, #48	; 0x30
    286a:	d016      	beq.n	289a <UART_SetConfig+0x19a>
    286c:	2b30      	cmp	r3, #48	; 0x30
    286e:	d818      	bhi.n	28a2 <UART_SetConfig+0x1a2>
    2870:	2b20      	cmp	r3, #32
    2872:	d00a      	beq.n	288a <UART_SetConfig+0x18a>
    2874:	2b20      	cmp	r3, #32
    2876:	d814      	bhi.n	28a2 <UART_SetConfig+0x1a2>
    2878:	2b00      	cmp	r3, #0
    287a:	d002      	beq.n	2882 <UART_SetConfig+0x182>
    287c:	2b10      	cmp	r3, #16
    287e:	d008      	beq.n	2892 <UART_SetConfig+0x192>
    2880:	e00f      	b.n	28a2 <UART_SetConfig+0x1a2>
    2882:	2300      	movs	r3, #0
    2884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2888:	e042      	b.n	2910 <UART_SetConfig+0x210>
    288a:	2302      	movs	r3, #2
    288c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2890:	e03e      	b.n	2910 <UART_SetConfig+0x210>
    2892:	2304      	movs	r3, #4
    2894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2898:	e03a      	b.n	2910 <UART_SetConfig+0x210>
    289a:	2308      	movs	r3, #8
    289c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    28a0:	e036      	b.n	2910 <UART_SetConfig+0x210>
    28a2:	2310      	movs	r3, #16
    28a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    28a8:	e032      	b.n	2910 <UART_SetConfig+0x210>
    28aa:	68fb      	ldr	r3, [r7, #12]
    28ac:	681b      	ldr	r3, [r3, #0]
    28ae:	4a3f      	ldr	r2, [pc, #252]	; (29ac <UART_SetConfig+0x2ac>)
    28b0:	4293      	cmp	r3, r2
    28b2:	d12a      	bne.n	290a <UART_SetConfig+0x20a>
    28b4:	4b3f      	ldr	r3, [pc, #252]	; (29b4 <UART_SetConfig+0x2b4>)
    28b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    28ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    28be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    28c2:	d01a      	beq.n	28fa <UART_SetConfig+0x1fa>
    28c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    28c8:	d81b      	bhi.n	2902 <UART_SetConfig+0x202>
    28ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    28ce:	d00c      	beq.n	28ea <UART_SetConfig+0x1ea>
    28d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    28d4:	d815      	bhi.n	2902 <UART_SetConfig+0x202>
    28d6:	2b00      	cmp	r3, #0
    28d8:	d003      	beq.n	28e2 <UART_SetConfig+0x1e2>
    28da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    28de:	d008      	beq.n	28f2 <UART_SetConfig+0x1f2>
    28e0:	e00f      	b.n	2902 <UART_SetConfig+0x202>
    28e2:	2300      	movs	r3, #0
    28e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    28e8:	e012      	b.n	2910 <UART_SetConfig+0x210>
    28ea:	2302      	movs	r3, #2
    28ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    28f0:	e00e      	b.n	2910 <UART_SetConfig+0x210>
    28f2:	2304      	movs	r3, #4
    28f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    28f8:	e00a      	b.n	2910 <UART_SetConfig+0x210>
    28fa:	2308      	movs	r3, #8
    28fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2900:	e006      	b.n	2910 <UART_SetConfig+0x210>
    2902:	2310      	movs	r3, #16
    2904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    2908:	e002      	b.n	2910 <UART_SetConfig+0x210>
    290a:	2310      	movs	r3, #16
    290c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
    2910:	68fb      	ldr	r3, [r7, #12]
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	4a25      	ldr	r2, [pc, #148]	; (29ac <UART_SetConfig+0x2ac>)
    2916:	4293      	cmp	r3, r2
    2918:	f040 808a 	bne.w	2a30 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
    291c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    2920:	2b08      	cmp	r3, #8
    2922:	d824      	bhi.n	296e <UART_SetConfig+0x26e>
    2924:	a201      	add	r2, pc, #4	; (adr r2, 292c <UART_SetConfig+0x22c>)
    2926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    292a:	bf00      	nop
    292c:	00002951 	.word	0x00002951
    2930:	0000296f 	.word	0x0000296f
    2934:	00002959 	.word	0x00002959
    2938:	0000296f 	.word	0x0000296f
    293c:	0000295f 	.word	0x0000295f
    2940:	0000296f 	.word	0x0000296f
    2944:	0000296f 	.word	0x0000296f
    2948:	0000296f 	.word	0x0000296f
    294c:	00002967 	.word	0x00002967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
    2950:	f7ff f9a8 	bl	1ca4 <HAL_RCC_GetPCLK1Freq>
    2954:	61f8      	str	r0, [r7, #28]
        break;
    2956:	e010      	b.n	297a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
    2958:	4b19      	ldr	r3, [pc, #100]	; (29c0 <UART_SetConfig+0x2c0>)
    295a:	61fb      	str	r3, [r7, #28]
        break;
    295c:	e00d      	b.n	297a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
    295e:	f7ff f909 	bl	1b74 <HAL_RCC_GetSysClockFreq>
    2962:	61f8      	str	r0, [r7, #28]
        break;
    2964:	e009      	b.n	297a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
    2966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    296a:	61fb      	str	r3, [r7, #28]
        break;
    296c:	e005      	b.n	297a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
    296e:	2300      	movs	r3, #0
    2970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
    2972:	2301      	movs	r3, #1
    2974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
    2978:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	2b00      	cmp	r3, #0
    297e:	f000 8109 	beq.w	2b94 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
    2982:	68fb      	ldr	r3, [r7, #12]
    2984:	685a      	ldr	r2, [r3, #4]
    2986:	4613      	mov	r3, r2
    2988:	005b      	lsls	r3, r3, #1
    298a:	4413      	add	r3, r2
    298c:	69fa      	ldr	r2, [r7, #28]
    298e:	429a      	cmp	r2, r3
    2990:	d305      	bcc.n	299e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
    2992:	68fb      	ldr	r3, [r7, #12]
    2994:	685b      	ldr	r3, [r3, #4]
    2996:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
    2998:	69fa      	ldr	r2, [r7, #28]
    299a:	429a      	cmp	r2, r3
    299c:	d912      	bls.n	29c4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
    299e:	2301      	movs	r3, #1
    29a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    29a4:	e0f6      	b.n	2b94 <UART_SetConfig+0x494>
    29a6:	bf00      	nop
    29a8:	efff69f3 	.word	0xefff69f3
    29ac:	40008000 	.word	0x40008000
    29b0:	40013800 	.word	0x40013800
    29b4:	40021000 	.word	0x40021000
    29b8:	40004400 	.word	0x40004400
    29bc:	40004800 	.word	0x40004800
    29c0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
    29c4:	69fb      	ldr	r3, [r7, #28]
    29c6:	2200      	movs	r2, #0
    29c8:	461c      	mov	r4, r3
    29ca:	4615      	mov	r5, r2
    29cc:	f04f 0200 	mov.w	r2, #0
    29d0:	f04f 0300 	mov.w	r3, #0
    29d4:	022b      	lsls	r3, r5, #8
    29d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
    29da:	0222      	lsls	r2, r4, #8
    29dc:	68f9      	ldr	r1, [r7, #12]
    29de:	6849      	ldr	r1, [r1, #4]
    29e0:	0849      	lsrs	r1, r1, #1
    29e2:	2000      	movs	r0, #0
    29e4:	4688      	mov	r8, r1
    29e6:	4681      	mov	r9, r0
    29e8:	eb12 0a08 	adds.w	sl, r2, r8
    29ec:	eb43 0b09 	adc.w	fp, r3, r9
    29f0:	68fb      	ldr	r3, [r7, #12]
    29f2:	685b      	ldr	r3, [r3, #4]
    29f4:	2200      	movs	r2, #0
    29f6:	603b      	str	r3, [r7, #0]
    29f8:	607a      	str	r2, [r7, #4]
    29fa:	e9d7 2300 	ldrd	r2, r3, [r7]
    29fe:	4650      	mov	r0, sl
    2a00:	4659      	mov	r1, fp
    2a02:	f7fd fbe3 	bl	1cc <__aeabi_uldivmod>
    2a06:	4602      	mov	r2, r0
    2a08:	460b      	mov	r3, r1
    2a0a:	4613      	mov	r3, r2
    2a0c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
    2a0e:	69bb      	ldr	r3, [r7, #24]
    2a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2a14:	d308      	bcc.n	2a28 <UART_SetConfig+0x328>
    2a16:	69bb      	ldr	r3, [r7, #24]
    2a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2a1c:	d204      	bcs.n	2a28 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
    2a1e:	68fb      	ldr	r3, [r7, #12]
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	69ba      	ldr	r2, [r7, #24]
    2a24:	60da      	str	r2, [r3, #12]
    2a26:	e0b5      	b.n	2b94 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
    2a28:	2301      	movs	r3, #1
    2a2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    2a2e:	e0b1      	b.n	2b94 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	69db      	ldr	r3, [r3, #28]
    2a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2a38:	d15d      	bne.n	2af6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
    2a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    2a3e:	2b08      	cmp	r3, #8
    2a40:	d827      	bhi.n	2a92 <UART_SetConfig+0x392>
    2a42:	a201      	add	r2, pc, #4	; (adr r2, 2a48 <UART_SetConfig+0x348>)
    2a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2a48:	00002a6d 	.word	0x00002a6d
    2a4c:	00002a75 	.word	0x00002a75
    2a50:	00002a7d 	.word	0x00002a7d
    2a54:	00002a93 	.word	0x00002a93
    2a58:	00002a83 	.word	0x00002a83
    2a5c:	00002a93 	.word	0x00002a93
    2a60:	00002a93 	.word	0x00002a93
    2a64:	00002a93 	.word	0x00002a93
    2a68:	00002a8b 	.word	0x00002a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
    2a6c:	f7ff f91a 	bl	1ca4 <HAL_RCC_GetPCLK1Freq>
    2a70:	61f8      	str	r0, [r7, #28]
        break;
    2a72:	e014      	b.n	2a9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
    2a74:	f7ff f92c 	bl	1cd0 <HAL_RCC_GetPCLK2Freq>
    2a78:	61f8      	str	r0, [r7, #28]
        break;
    2a7a:	e010      	b.n	2a9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
    2a7c:	4b4c      	ldr	r3, [pc, #304]	; (2bb0 <UART_SetConfig+0x4b0>)
    2a7e:	61fb      	str	r3, [r7, #28]
        break;
    2a80:	e00d      	b.n	2a9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
    2a82:	f7ff f877 	bl	1b74 <HAL_RCC_GetSysClockFreq>
    2a86:	61f8      	str	r0, [r7, #28]
        break;
    2a88:	e009      	b.n	2a9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
    2a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2a8e:	61fb      	str	r3, [r7, #28]
        break;
    2a90:	e005      	b.n	2a9e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
    2a92:	2300      	movs	r3, #0
    2a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
    2a96:	2301      	movs	r3, #1
    2a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
    2a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
    2a9e:	69fb      	ldr	r3, [r7, #28]
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d077      	beq.n	2b94 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
    2aa4:	69fb      	ldr	r3, [r7, #28]
    2aa6:	005a      	lsls	r2, r3, #1
    2aa8:	68fb      	ldr	r3, [r7, #12]
    2aaa:	685b      	ldr	r3, [r3, #4]
    2aac:	085b      	lsrs	r3, r3, #1
    2aae:	441a      	add	r2, r3
    2ab0:	68fb      	ldr	r3, [r7, #12]
    2ab2:	685b      	ldr	r3, [r3, #4]
    2ab4:	fbb2 f3f3 	udiv	r3, r2, r3
    2ab8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    2aba:	69bb      	ldr	r3, [r7, #24]
    2abc:	2b0f      	cmp	r3, #15
    2abe:	d916      	bls.n	2aee <UART_SetConfig+0x3ee>
    2ac0:	69bb      	ldr	r3, [r7, #24]
    2ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2ac6:	d212      	bcs.n	2aee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
    2ac8:	69bb      	ldr	r3, [r7, #24]
    2aca:	b29b      	uxth	r3, r3
    2acc:	f023 030f 	bic.w	r3, r3, #15
    2ad0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    2ad2:	69bb      	ldr	r3, [r7, #24]
    2ad4:	085b      	lsrs	r3, r3, #1
    2ad6:	b29b      	uxth	r3, r3
    2ad8:	f003 0307 	and.w	r3, r3, #7
    2adc:	b29a      	uxth	r2, r3
    2ade:	8afb      	ldrh	r3, [r7, #22]
    2ae0:	4313      	orrs	r3, r2
    2ae2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
    2ae4:	68fb      	ldr	r3, [r7, #12]
    2ae6:	681b      	ldr	r3, [r3, #0]
    2ae8:	8afa      	ldrh	r2, [r7, #22]
    2aea:	60da      	str	r2, [r3, #12]
    2aec:	e052      	b.n	2b94 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
    2aee:	2301      	movs	r3, #1
    2af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    2af4:	e04e      	b.n	2b94 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
    2af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    2afa:	2b08      	cmp	r3, #8
    2afc:	d827      	bhi.n	2b4e <UART_SetConfig+0x44e>
    2afe:	a201      	add	r2, pc, #4	; (adr r2, 2b04 <UART_SetConfig+0x404>)
    2b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2b04:	00002b29 	.word	0x00002b29
    2b08:	00002b31 	.word	0x00002b31
    2b0c:	00002b39 	.word	0x00002b39
    2b10:	00002b4f 	.word	0x00002b4f
    2b14:	00002b3f 	.word	0x00002b3f
    2b18:	00002b4f 	.word	0x00002b4f
    2b1c:	00002b4f 	.word	0x00002b4f
    2b20:	00002b4f 	.word	0x00002b4f
    2b24:	00002b47 	.word	0x00002b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
    2b28:	f7ff f8bc 	bl	1ca4 <HAL_RCC_GetPCLK1Freq>
    2b2c:	61f8      	str	r0, [r7, #28]
        break;
    2b2e:	e014      	b.n	2b5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
    2b30:	f7ff f8ce 	bl	1cd0 <HAL_RCC_GetPCLK2Freq>
    2b34:	61f8      	str	r0, [r7, #28]
        break;
    2b36:	e010      	b.n	2b5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
    2b38:	4b1d      	ldr	r3, [pc, #116]	; (2bb0 <UART_SetConfig+0x4b0>)
    2b3a:	61fb      	str	r3, [r7, #28]
        break;
    2b3c:	e00d      	b.n	2b5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
    2b3e:	f7ff f819 	bl	1b74 <HAL_RCC_GetSysClockFreq>
    2b42:	61f8      	str	r0, [r7, #28]
        break;
    2b44:	e009      	b.n	2b5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
    2b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2b4a:	61fb      	str	r3, [r7, #28]
        break;
    2b4c:	e005      	b.n	2b5a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
    2b4e:	2300      	movs	r3, #0
    2b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
    2b52:	2301      	movs	r3, #1
    2b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
    2b58:	bf00      	nop
    }

    if (pclk != 0U)
    2b5a:	69fb      	ldr	r3, [r7, #28]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d019      	beq.n	2b94 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
    2b60:	68fb      	ldr	r3, [r7, #12]
    2b62:	685b      	ldr	r3, [r3, #4]
    2b64:	085a      	lsrs	r2, r3, #1
    2b66:	69fb      	ldr	r3, [r7, #28]
    2b68:	441a      	add	r2, r3
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	685b      	ldr	r3, [r3, #4]
    2b6e:	fbb2 f3f3 	udiv	r3, r2, r3
    2b72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    2b74:	69bb      	ldr	r3, [r7, #24]
    2b76:	2b0f      	cmp	r3, #15
    2b78:	d909      	bls.n	2b8e <UART_SetConfig+0x48e>
    2b7a:	69bb      	ldr	r3, [r7, #24]
    2b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2b80:	d205      	bcs.n	2b8e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
    2b82:	69bb      	ldr	r3, [r7, #24]
    2b84:	b29a      	uxth	r2, r3
    2b86:	68fb      	ldr	r3, [r7, #12]
    2b88:	681b      	ldr	r3, [r3, #0]
    2b8a:	60da      	str	r2, [r3, #12]
    2b8c:	e002      	b.n	2b94 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
    2b8e:	2301      	movs	r3, #1
    2b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
    2b94:	68fb      	ldr	r3, [r7, #12]
    2b96:	2200      	movs	r2, #0
    2b98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	2200      	movs	r2, #0
    2b9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
    2ba0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
    2ba4:	4618      	mov	r0, r3
    2ba6:	3728      	adds	r7, #40	; 0x28
    2ba8:	46bd      	mov	sp, r7
    2baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    2bae:	bf00      	nop
    2bb0:	00f42400 	.word	0x00f42400

00002bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
    2bb4:	b480      	push	{r7}
    2bb6:	b083      	sub	sp, #12
    2bb8:	af00      	add	r7, sp, #0
    2bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2bc0:	f003 0308 	and.w	r3, r3, #8
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d00a      	beq.n	2bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	681b      	ldr	r3, [r3, #0]
    2bcc:	685b      	ldr	r3, [r3, #4]
    2bce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	681b      	ldr	r3, [r3, #0]
    2bda:	430a      	orrs	r2, r1
    2bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2be2:	f003 0301 	and.w	r3, r3, #1
    2be6:	2b00      	cmp	r3, #0
    2be8:	d00a      	beq.n	2c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	685b      	ldr	r3, [r3, #4]
    2bf0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bf8:	687b      	ldr	r3, [r7, #4]
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	430a      	orrs	r2, r1
    2bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c04:	f003 0302 	and.w	r3, r3, #2
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d00a      	beq.n	2c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	681b      	ldr	r3, [r3, #0]
    2c10:	685b      	ldr	r3, [r3, #4]
    2c12:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	681b      	ldr	r3, [r3, #0]
    2c1e:	430a      	orrs	r2, r1
    2c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c26:	f003 0304 	and.w	r3, r3, #4
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d00a      	beq.n	2c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
    2c2e:	687b      	ldr	r3, [r7, #4]
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	685b      	ldr	r3, [r3, #4]
    2c34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	681b      	ldr	r3, [r3, #0]
    2c40:	430a      	orrs	r2, r1
    2c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c48:	f003 0310 	and.w	r3, r3, #16
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d00a      	beq.n	2c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	689b      	ldr	r3, [r3, #8]
    2c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c5e:	687b      	ldr	r3, [r7, #4]
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	430a      	orrs	r2, r1
    2c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c6a:	f003 0320 	and.w	r3, r3, #32
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d00a      	beq.n	2c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	681b      	ldr	r3, [r3, #0]
    2c76:	689b      	ldr	r3, [r3, #8]
    2c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
    2c7c:	687b      	ldr	r3, [r7, #4]
    2c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	430a      	orrs	r2, r1
    2c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2c90:	2b00      	cmp	r3, #0
    2c92:	d01a      	beq.n	2cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	685b      	ldr	r3, [r3, #4]
    2c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	430a      	orrs	r2, r1
    2ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2cb2:	d10a      	bne.n	2cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	685b      	ldr	r3, [r3, #4]
    2cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	430a      	orrs	r2, r1
    2cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d00a      	beq.n	2cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	685b      	ldr	r3, [r3, #4]
    2cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	430a      	orrs	r2, r1
    2cea:	605a      	str	r2, [r3, #4]
  }
}
    2cec:	bf00      	nop
    2cee:	370c      	adds	r7, #12
    2cf0:	46bd      	mov	sp, r7
    2cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cf6:	4770      	bx	lr

00002cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b098      	sub	sp, #96	; 0x60
    2cfc:	af02      	add	r7, sp, #8
    2cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
    2d00:	687b      	ldr	r3, [r7, #4]
    2d02:	2200      	movs	r2, #0
    2d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
    2d08:	f7fd fe9c 	bl	a44 <HAL_GetTick>
    2d0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	681b      	ldr	r3, [r3, #0]
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	f003 0308 	and.w	r3, r3, #8
    2d18:	2b08      	cmp	r3, #8
    2d1a:	d12e      	bne.n	2d7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    2d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
    2d20:	9300      	str	r3, [sp, #0]
    2d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d24:	2200      	movs	r2, #0
    2d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    2d2a:	6878      	ldr	r0, [r7, #4]
    2d2c:	f000 f88c 	bl	2e48 <UART_WaitOnFlagUntilTimeout>
    2d30:	4603      	mov	r3, r0
    2d32:	2b00      	cmp	r3, #0
    2d34:	d021      	beq.n	2d7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
    2d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d3e:	e853 3f00 	ldrex	r3, [r3]
    2d42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
    2d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2d4a:	653b      	str	r3, [r7, #80]	; 0x50
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	681b      	ldr	r3, [r3, #0]
    2d50:	461a      	mov	r2, r3
    2d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2d54:	647b      	str	r3, [r7, #68]	; 0x44
    2d56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
    2d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
    2d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2d5c:	e841 2300 	strex	r3, r2, [r1]
    2d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
    2d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d64:	2b00      	cmp	r3, #0
    2d66:	d1e6      	bne.n	2d36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	2220      	movs	r2, #32
    2d6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
    2d6e:	687b      	ldr	r3, [r7, #4]
    2d70:	2200      	movs	r2, #0
    2d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
    2d76:	2303      	movs	r3, #3
    2d78:	e062      	b.n	2e40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	681b      	ldr	r3, [r3, #0]
    2d7e:	681b      	ldr	r3, [r3, #0]
    2d80:	f003 0304 	and.w	r3, r3, #4
    2d84:	2b04      	cmp	r3, #4
    2d86:	d149      	bne.n	2e1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    2d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
    2d8c:	9300      	str	r3, [sp, #0]
    2d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d90:	2200      	movs	r2, #0
    2d92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    2d96:	6878      	ldr	r0, [r7, #4]
    2d98:	f000 f856 	bl	2e48 <UART_WaitOnFlagUntilTimeout>
    2d9c:	4603      	mov	r3, r0
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d03c      	beq.n	2e1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	681b      	ldr	r3, [r3, #0]
    2da6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
    2da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2daa:	e853 3f00 	ldrex	r3, [r3]
    2dae:	623b      	str	r3, [r7, #32]
   return(result);
    2db0:	6a3b      	ldr	r3, [r7, #32]
    2db2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
    2db6:	64fb      	str	r3, [r7, #76]	; 0x4c
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	681b      	ldr	r3, [r3, #0]
    2dbc:	461a      	mov	r2, r3
    2dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2dc0:	633b      	str	r3, [r7, #48]	; 0x30
    2dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
    2dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2dc8:	e841 2300 	strex	r3, r2, [r1]
    2dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
    2dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d1e6      	bne.n	2da2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	681b      	ldr	r3, [r3, #0]
    2dd8:	3308      	adds	r3, #8
    2dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
    2ddc:	693b      	ldr	r3, [r7, #16]
    2dde:	e853 3f00 	ldrex	r3, [r3]
    2de2:	60fb      	str	r3, [r7, #12]
   return(result);
    2de4:	68fb      	ldr	r3, [r7, #12]
    2de6:	f023 0301 	bic.w	r3, r3, #1
    2dea:	64bb      	str	r3, [r7, #72]	; 0x48
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	3308      	adds	r3, #8
    2df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    2df4:	61fa      	str	r2, [r7, #28]
    2df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
    2df8:	69b9      	ldr	r1, [r7, #24]
    2dfa:	69fa      	ldr	r2, [r7, #28]
    2dfc:	e841 2300 	strex	r3, r2, [r1]
    2e00:	617b      	str	r3, [r7, #20]
   return(result);
    2e02:	697b      	ldr	r3, [r7, #20]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d1e5      	bne.n	2dd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	2220      	movs	r2, #32
    2e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	2200      	movs	r2, #0
    2e14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
    2e18:	2303      	movs	r3, #3
    2e1a:	e011      	b.n	2e40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
    2e1c:	687b      	ldr	r3, [r7, #4]
    2e1e:	2220      	movs	r2, #32
    2e20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	2220      	movs	r2, #32
    2e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	2200      	movs	r2, #0
    2e2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	2200      	movs	r2, #0
    2e34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	2200      	movs	r2, #0
    2e3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
    2e3e:	2300      	movs	r3, #0
}
    2e40:	4618      	mov	r0, r3
    2e42:	3758      	adds	r7, #88	; 0x58
    2e44:	46bd      	mov	sp, r7
    2e46:	bd80      	pop	{r7, pc}

00002e48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b084      	sub	sp, #16
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	60f8      	str	r0, [r7, #12]
    2e50:	60b9      	str	r1, [r7, #8]
    2e52:	603b      	str	r3, [r7, #0]
    2e54:	4613      	mov	r3, r2
    2e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
    2e58:	e049      	b.n	2eee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    2e5a:	69bb      	ldr	r3, [r7, #24]
    2e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2e60:	d045      	beq.n	2eee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    2e62:	f7fd fdef 	bl	a44 <HAL_GetTick>
    2e66:	4602      	mov	r2, r0
    2e68:	683b      	ldr	r3, [r7, #0]
    2e6a:	1ad3      	subs	r3, r2, r3
    2e6c:	69ba      	ldr	r2, [r7, #24]
    2e6e:	429a      	cmp	r2, r3
    2e70:	d302      	bcc.n	2e78 <UART_WaitOnFlagUntilTimeout+0x30>
    2e72:	69bb      	ldr	r3, [r7, #24]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d101      	bne.n	2e7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
    2e78:	2303      	movs	r3, #3
    2e7a:	e048      	b.n	2f0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
    2e7c:	68fb      	ldr	r3, [r7, #12]
    2e7e:	681b      	ldr	r3, [r3, #0]
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	f003 0304 	and.w	r3, r3, #4
    2e86:	2b00      	cmp	r3, #0
    2e88:	d031      	beq.n	2eee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
    2e8a:	68fb      	ldr	r3, [r7, #12]
    2e8c:	681b      	ldr	r3, [r3, #0]
    2e8e:	69db      	ldr	r3, [r3, #28]
    2e90:	f003 0308 	and.w	r3, r3, #8
    2e94:	2b08      	cmp	r3, #8
    2e96:	d110      	bne.n	2eba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
    2e98:	68fb      	ldr	r3, [r7, #12]
    2e9a:	681b      	ldr	r3, [r3, #0]
    2e9c:	2208      	movs	r2, #8
    2e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
    2ea0:	68f8      	ldr	r0, [r7, #12]
    2ea2:	f000 f838 	bl	2f16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
    2ea6:	68fb      	ldr	r3, [r7, #12]
    2ea8:	2208      	movs	r2, #8
    2eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
    2eae:	68fb      	ldr	r3, [r7, #12]
    2eb0:	2200      	movs	r2, #0
    2eb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
    2eb6:	2301      	movs	r3, #1
    2eb8:	e029      	b.n	2f0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
    2eba:	68fb      	ldr	r3, [r7, #12]
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	69db      	ldr	r3, [r3, #28]
    2ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    2ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2ec8:	d111      	bne.n	2eee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	681b      	ldr	r3, [r3, #0]
    2ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2ed2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
    2ed4:	68f8      	ldr	r0, [r7, #12]
    2ed6:	f000 f81e 	bl	2f16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
    2eda:	68fb      	ldr	r3, [r7, #12]
    2edc:	2220      	movs	r2, #32
    2ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	2200      	movs	r2, #0
    2ee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
    2eea:	2303      	movs	r3, #3
    2eec:	e00f      	b.n	2f0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
    2eee:	68fb      	ldr	r3, [r7, #12]
    2ef0:	681b      	ldr	r3, [r3, #0]
    2ef2:	69da      	ldr	r2, [r3, #28]
    2ef4:	68bb      	ldr	r3, [r7, #8]
    2ef6:	4013      	ands	r3, r2
    2ef8:	68ba      	ldr	r2, [r7, #8]
    2efa:	429a      	cmp	r2, r3
    2efc:	bf0c      	ite	eq
    2efe:	2301      	moveq	r3, #1
    2f00:	2300      	movne	r3, #0
    2f02:	b2db      	uxtb	r3, r3
    2f04:	461a      	mov	r2, r3
    2f06:	79fb      	ldrb	r3, [r7, #7]
    2f08:	429a      	cmp	r2, r3
    2f0a:	d0a6      	beq.n	2e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
    2f0c:	2300      	movs	r3, #0
}
    2f0e:	4618      	mov	r0, r3
    2f10:	3710      	adds	r7, #16
    2f12:	46bd      	mov	sp, r7
    2f14:	bd80      	pop	{r7, pc}

00002f16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
    2f16:	b480      	push	{r7}
    2f18:	b095      	sub	sp, #84	; 0x54
    2f1a:	af00      	add	r7, sp, #0
    2f1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
    2f1e:	687b      	ldr	r3, [r7, #4]
    2f20:	681b      	ldr	r3, [r3, #0]
    2f22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
    2f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f26:	e853 3f00 	ldrex	r3, [r3]
    2f2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
    2f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
    2f32:	64fb      	str	r3, [r7, #76]	; 0x4c
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	461a      	mov	r2, r3
    2f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2f3c:	643b      	str	r3, [r7, #64]	; 0x40
    2f3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
    2f40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    2f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2f44:	e841 2300 	strex	r3, r2, [r1]
    2f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
    2f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d1e6      	bne.n	2f1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
    2f50:	687b      	ldr	r3, [r7, #4]
    2f52:	681b      	ldr	r3, [r3, #0]
    2f54:	3308      	adds	r3, #8
    2f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
    2f58:	6a3b      	ldr	r3, [r7, #32]
    2f5a:	e853 3f00 	ldrex	r3, [r3]
    2f5e:	61fb      	str	r3, [r7, #28]
   return(result);
    2f60:	69fb      	ldr	r3, [r7, #28]
    2f62:	f023 0301 	bic.w	r3, r3, #1
    2f66:	64bb      	str	r3, [r7, #72]	; 0x48
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	681b      	ldr	r3, [r3, #0]
    2f6c:	3308      	adds	r3, #8
    2f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    2f70:	62fa      	str	r2, [r7, #44]	; 0x2c
    2f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
    2f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2f78:	e841 2300 	strex	r3, r2, [r1]
    2f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
    2f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1e5      	bne.n	2f50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2f88:	2b01      	cmp	r3, #1
    2f8a:	d118      	bne.n	2fbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
    2f92:	68fb      	ldr	r3, [r7, #12]
    2f94:	e853 3f00 	ldrex	r3, [r3]
    2f98:	60bb      	str	r3, [r7, #8]
   return(result);
    2f9a:	68bb      	ldr	r3, [r7, #8]
    2f9c:	f023 0310 	bic.w	r3, r3, #16
    2fa0:	647b      	str	r3, [r7, #68]	; 0x44
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	681b      	ldr	r3, [r3, #0]
    2fa6:	461a      	mov	r2, r3
    2fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2faa:	61bb      	str	r3, [r7, #24]
    2fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
    2fae:	6979      	ldr	r1, [r7, #20]
    2fb0:	69ba      	ldr	r2, [r7, #24]
    2fb2:	e841 2300 	strex	r3, r2, [r1]
    2fb6:	613b      	str	r3, [r7, #16]
   return(result);
    2fb8:	693b      	ldr	r3, [r7, #16]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d1e6      	bne.n	2f8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	2220      	movs	r2, #32
    2fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	2200      	movs	r2, #0
    2fca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	2200      	movs	r2, #0
    2fd0:	669a      	str	r2, [r3, #104]	; 0x68
}
    2fd2:	bf00      	nop
    2fd4:	3754      	adds	r7, #84	; 0x54
    2fd6:	46bd      	mov	sp, r7
    2fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fdc:	4770      	bx	lr

00002fde <memset>:
    2fde:	4402      	add	r2, r0
    2fe0:	4603      	mov	r3, r0
    2fe2:	4293      	cmp	r3, r2
    2fe4:	d100      	bne.n	2fe8 <memset+0xa>
    2fe6:	4770      	bx	lr
    2fe8:	f803 1b01 	strb.w	r1, [r3], #1
    2fec:	e7f9      	b.n	2fe2 <memset+0x4>
	...

00002ff0 <__libc_init_array>:
    2ff0:	b570      	push	{r4, r5, r6, lr}
    2ff2:	4d0d      	ldr	r5, [pc, #52]	; (3028 <__libc_init_array+0x38>)
    2ff4:	4c0d      	ldr	r4, [pc, #52]	; (302c <__libc_init_array+0x3c>)
    2ff6:	1b64      	subs	r4, r4, r5
    2ff8:	10a4      	asrs	r4, r4, #2
    2ffa:	2600      	movs	r6, #0
    2ffc:	42a6      	cmp	r6, r4
    2ffe:	d109      	bne.n	3014 <__libc_init_array+0x24>
    3000:	4d0b      	ldr	r5, [pc, #44]	; (3030 <__libc_init_array+0x40>)
    3002:	4c0c      	ldr	r4, [pc, #48]	; (3034 <__libc_init_array+0x44>)
    3004:	f000 f818 	bl	3038 <_init>
    3008:	1b64      	subs	r4, r4, r5
    300a:	10a4      	asrs	r4, r4, #2
    300c:	2600      	movs	r6, #0
    300e:	42a6      	cmp	r6, r4
    3010:	d105      	bne.n	301e <__libc_init_array+0x2e>
    3012:	bd70      	pop	{r4, r5, r6, pc}
    3014:	f855 3b04 	ldr.w	r3, [r5], #4
    3018:	4798      	blx	r3
    301a:	3601      	adds	r6, #1
    301c:	e7ee      	b.n	2ffc <__libc_init_array+0xc>
    301e:	f855 3b04 	ldr.w	r3, [r5], #4
    3022:	4798      	blx	r3
    3024:	3601      	adds	r6, #1
    3026:	e7f2      	b.n	300e <__libc_init_array+0x1e>
    3028:	000030a0 	.word	0x000030a0
    302c:	000030a0 	.word	0x000030a0
    3030:	000030a0 	.word	0x000030a0
    3034:	000030a4 	.word	0x000030a4

00003038 <_init>:
    3038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    303a:	bf00      	nop
    303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    303e:	bc08      	pop	{r3}
    3040:	469e      	mov	lr, r3
    3042:	4770      	bx	lr

00003044 <_fini>:
    3044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3046:	bf00      	nop
    3048:	bcf8      	pop	{r3, r4, r5, r6, r7}
    304a:	bc08      	pop	{r3}
    304c:	469e      	mov	lr, r3
    304e:	4770      	bx	lr
